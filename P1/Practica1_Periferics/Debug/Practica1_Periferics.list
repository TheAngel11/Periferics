
Practica1_Periferics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001690  08001690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000002c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000071e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013c8  00000000  00000000  00027221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009c8  00000000  00000000  000285f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000034f0  00000000  00000000  000298a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000030f0  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fe88  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b24  00000000  00000000  0002ff04  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800163c 	.word	0x0800163c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800163c 	.word	0x0800163c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__gedf2>:
 8000560:	f04f 3cff 	mov.w	ip, #4294967295
 8000564:	e006      	b.n	8000574 <__cmpdf2+0x4>
 8000566:	bf00      	nop

08000568 <__ledf2>:
 8000568:	f04f 0c01 	mov.w	ip, #1
 800056c:	e002      	b.n	8000574 <__cmpdf2+0x4>
 800056e:	bf00      	nop

08000570 <__cmpdf2>:
 8000570:	f04f 0c01 	mov.w	ip, #1
 8000574:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000584:	bf18      	it	ne
 8000586:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058a:	d01b      	beq.n	80005c4 <__cmpdf2+0x54>
 800058c:	b001      	add	sp, #4
 800058e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000592:	bf0c      	ite	eq
 8000594:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000598:	ea91 0f03 	teqne	r1, r3
 800059c:	bf02      	ittt	eq
 800059e:	ea90 0f02 	teqeq	r0, r2
 80005a2:	2000      	moveq	r0, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	f110 0f00 	cmn.w	r0, #0
 80005aa:	ea91 0f03 	teq	r1, r3
 80005ae:	bf58      	it	pl
 80005b0:	4299      	cmppl	r1, r3
 80005b2:	bf08      	it	eq
 80005b4:	4290      	cmpeq	r0, r2
 80005b6:	bf2c      	ite	cs
 80005b8:	17d8      	asrcs	r0, r3, #31
 80005ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005be:	f040 0001 	orr.w	r0, r0, #1
 80005c2:	4770      	bx	lr
 80005c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d102      	bne.n	80005d4 <__cmpdf2+0x64>
 80005ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d2:	d107      	bne.n	80005e4 <__cmpdf2+0x74>
 80005d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005dc:	d1d6      	bne.n	800058c <__cmpdf2+0x1c>
 80005de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e2:	d0d3      	beq.n	800058c <__cmpdf2+0x1c>
 80005e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__aeabi_cdrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	4610      	mov	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	468c      	mov	ip, r1
 80005f4:	4619      	mov	r1, r3
 80005f6:	4663      	mov	r3, ip
 80005f8:	e000      	b.n	80005fc <__aeabi_cdcmpeq>
 80005fa:	bf00      	nop

080005fc <__aeabi_cdcmpeq>:
 80005fc:	b501      	push	{r0, lr}
 80005fe:	f7ff ffb7 	bl	8000570 <__cmpdf2>
 8000602:	2800      	cmp	r0, #0
 8000604:	bf48      	it	mi
 8000606:	f110 0f00 	cmnmi.w	r0, #0
 800060a:	bd01      	pop	{r0, pc}

0800060c <__aeabi_dcmpeq>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff fff4 	bl	80005fc <__aeabi_cdcmpeq>
 8000614:	bf0c      	ite	eq
 8000616:	2001      	moveq	r0, #1
 8000618:	2000      	movne	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmplt>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffea 	bl	80005fc <__aeabi_cdcmpeq>
 8000628:	bf34      	ite	cc
 800062a:	2001      	movcc	r0, #1
 800062c:	2000      	movcs	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmple>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffe0 	bl	80005fc <__aeabi_cdcmpeq>
 800063c:	bf94      	ite	ls
 800063e:	2001      	movls	r0, #1
 8000640:	2000      	movhi	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmpge>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffce 	bl	80005ec <__aeabi_cdrcmple>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpgt>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffc4 	bl	80005ec <__aeabi_cdrcmple>
 8000664:	bf34      	ite	cc
 8000666:	2001      	movcc	r0, #1
 8000668:	2000      	movcs	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	2300      	movs	r3, #0
 800067e:	73bb      	strb	r3, [r7, #14]
 8000680:	230f      	movs	r3, #15
 8000682:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d039      	beq.n	8000700 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <NVIC_Init+0xbc>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	43db      	mvns	r3, r3
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	f1c3 0304 	rsb	r3, r3, #4
 80006a2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80006a4:	7b7a      	ldrb	r2, [r7, #13]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	fa42 f303 	asr.w	r3, r2, r3
 80006ac:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	461a      	mov	r2, r3
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	789a      	ldrb	r2, [r3, #2]
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	4013      	ands	r3, r2
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <NVIC_Init+0xc0>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	7bfa      	ldrb	r2, [r7, #15]
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <NVIC_Init+0xc0>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80006fe:	e00f      	b.n	8000720 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000700:	490b      	ldr	r1, [pc, #44]	; (8000730 <NVIC_Init+0xc0>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 031f 	and.w	r3, r3, #31
 8000714:	2201      	movs	r2, #1
 8000716:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000718:	f100 0320 	add.w	r3, r0, #32
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e100 	.word	0xe000e100

08000734 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f043 0201 	orr.w	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000752:	e005      	b.n	8000760 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f023 0201 	bic.w	r2, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800076c:	b480      	push	{r7}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <DMA_GetFlagStatus+0x6c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d802      	bhi.n	800078c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <DMA_GetFlagStatus+0x70>)
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	e001      	b.n	8000790 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <DMA_GetFlagStatus+0x74>)
 800078e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e002      	b.n	80007a8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007ae:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007b2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	4013      	ands	r3, r2
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80007be:	2301      	movs	r3, #1
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e001      	b.n	80007c8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	4002640f 	.word	0x4002640f
 80007dc:	40026000 	.word	0x40026000
 80007e0:	40026400 	.word	0x40026400

080007e4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a10      	ldr	r2, [pc, #64]	; (8000834 <DMA_ClearFlag+0x50>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d802      	bhi.n	80007fc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <DMA_ClearFlag+0x54>)
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e001      	b.n	8000800 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <DMA_ClearFlag+0x58>)
 80007fe:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000810:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000818:	e006      	b.n	8000828 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000820:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	6093      	str	r3, [r2, #8]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	4002640f 	.word	0x4002640f
 8000838:	40026000 	.word	0x40026000
 800083c:	40026400 	.word	0x40026400

08000840 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <EXTI_Init+0xe0>)
 800084e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	799b      	ldrb	r3, [r3, #6]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d04f      	beq.n	80008f8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000858:	4931      	ldr	r1, [pc, #196]	; (8000920 <EXTI_Init+0xe0>)
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <EXTI_Init+0xe0>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	43db      	mvns	r3, r3
 8000864:	4013      	ands	r3, r2
 8000866:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000868:	492d      	ldr	r1, [pc, #180]	; (8000920 <EXTI_Init+0xe0>)
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <EXTI_Init+0xe0>)
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	43db      	mvns	r3, r3
 8000874:	4013      	ands	r3, r2
 8000876:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4413      	add	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	6811      	ldr	r1, [r2, #0]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000892:	4923      	ldr	r1, [pc, #140]	; (8000920 <EXTI_Init+0xe0>)
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <EXTI_Init+0xe0>)
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	43db      	mvns	r3, r3
 800089e:	4013      	ands	r3, r2
 80008a0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80008a2:	491f      	ldr	r1, [pc, #124]	; (8000920 <EXTI_Init+0xe0>)
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <EXTI_Init+0xe0>)
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	43db      	mvns	r3, r3
 80008ae:	4013      	ands	r3, r2
 80008b0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b10      	cmp	r3, #16
 80008b8:	d10e      	bne.n	80008d8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80008ba:	4919      	ldr	r1, [pc, #100]	; (8000920 <EXTI_Init+0xe0>)
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <EXTI_Init+0xe0>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80008c8:	4915      	ldr	r1, [pc, #84]	; (8000920 <EXTI_Init+0xe0>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <EXTI_Init+0xe0>)
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80008d6:	e01d      	b.n	8000914 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <EXTI_Init+0xe0>)
 80008da:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	6811      	ldr	r1, [r2, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
}
 80008f6:	e00d      	b.n	8000914 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	43d2      	mvns	r2, r2
 8000910:	400a      	ands	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40013c00 	.word	0x40013c00

08000924 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <EXTI_GetITStatus+0x30>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e001      	b.n	8000946 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40013c00 	.word	0x40013c00

08000958 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <EXTI_ClearITPendingBit+0x1c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6153      	str	r3, [r2, #20]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40013c00 	.word	0x40013c00

08000978 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e076      	b.n	8000a82 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000994:	2201      	movs	r2, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d165      	bne.n	8000a7c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2103      	movs	r1, #3
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	4619      	mov	r1, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d003      	beq.n	80009ee <GPIO_Init+0x76>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d12e      	bne.n	8000a4c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2103      	movs	r1, #3
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	401a      	ands	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	2301      	movs	r3, #1
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	7992      	ldrb	r2, [r2, #6]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	b292      	uxth	r2, r2
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	b292      	uxth	r2, r2
 8000a46:	431a      	orrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	79db      	ldrb	r3, [r3, #7]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d985      	bls.n	8000994 <GPIO_Init+0x1c>
    }
  }
}
 8000a88:	bf00      	nop
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000ab6:	e007      	b.n	8000ac8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	801a      	strh	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	0f1b      	lsrs	r3, r3, #28
 8000af2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000afa:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3314      	adds	r3, #20
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e005      	b.n	8000b16 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3318      	adds	r3, #24
 8000b14:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000b22:	2301      	movs	r3, #1
 8000b24:	75fb      	strb	r3, [r7, #23]
 8000b26:	e001      	b.n	8000b2c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b4e:	490a      	ldr	r1, [pc, #40]	; (8000b78 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b5a:	e006      	b.n	8000b6a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4013      	ands	r3, r2
 8000b68:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b8e:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b9a:	e006      	b.n	8000baa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b9c:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000bce:	490a      	ldr	r1, [pc, #40]	; (8000bf8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000bda:	e006      	b.n	8000bea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000bdc:	4906      	ldr	r1, [pc, #24]	; (8000bf8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4013      	ands	r3, r2
 8000be8:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000bfc:	b490      	push	{r4, r7}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	220f      	movs	r2, #15
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c20:	4916      	ldr	r1, [pc, #88]	; (8000c7c <SYSCFG_EXTILineConfig+0x80>)
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <SYSCFG_EXTILineConfig+0x80>)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3302      	adds	r3, #2
 8000c34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1c83      	adds	r3, r0, #2
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <SYSCFG_EXTILineConfig+0x80>)
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461c      	mov	r4, r3
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <SYSCFG_EXTILineConfig+0x80>)
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c5c:	79f9      	ldrb	r1, [r7, #7]
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	1ca3      	adds	r3, r4, #2
 8000c6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc90      	pop	{r4, r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40013800 	.word	0x40013800

08000c80 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <TIM_TimeBaseInit+0xbc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <TIM_TimeBaseInit+0x44>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <TIM_TimeBaseInit+0xc0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00f      	beq.n	8000cc4 <TIM_TimeBaseInit+0x44>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000caa:	d00b      	beq.n	8000cc4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <TIM_TimeBaseInit+0xc4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <TIM_TimeBaseInit+0x44>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a24      	ldr	r2, [pc, #144]	; (8000d48 <TIM_TimeBaseInit+0xc8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d003      	beq.n	8000cc4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <TIM_TimeBaseInit+0xcc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d108      	bne.n	8000cd6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cca:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	885a      	ldrh	r2, [r3, #2]
 8000cd0:	89fb      	ldrh	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <TIM_TimeBaseInit+0xd0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00c      	beq.n	8000cf8 <TIM_TimeBaseInit+0x78>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <TIM_TimeBaseInit+0xd4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d008      	beq.n	8000cf8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cec:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	891a      	ldrh	r2, [r3, #8]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	89fa      	ldrh	r2, [r7, #14]
 8000cfc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <TIM_TimeBaseInit+0xbc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d003      	beq.n	8000d1e <TIM_TimeBaseInit+0x9e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <TIM_TimeBaseInit+0xc0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d104      	bne.n	8000d28 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	7a9b      	ldrb	r3, [r3, #10]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	829a      	strh	r2, [r3, #20]
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40010400 	.word	0x40010400
 8000d44:	40000400 	.word	0x40000400
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	40000c00 	.word	0x40000c00
 8000d50:	40001000 	.word	0x40001000
 8000d54:	40001400 	.word	0x40001400

08000d58 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000d7a:	e007      	b.n	8000d8c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	801a      	strh	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d008      	beq.n	8000dc0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	899b      	ldrh	r3, [r3, #12]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000dbe:	e009      	b.n	8000dd4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	899b      	ldrh	r3, [r3, #12]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	819a      	strh	r2, [r3, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	2300      	movs	r3, #0
 8000df6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	8a1b      	ldrh	r3, [r3, #16]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	4013      	ands	r3, r2
 8000e02:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	899b      	ldrh	r3, [r3, #12]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000e10:	89bb      	ldrh	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <TIM_GetITStatus+0x42>
 8000e16:	897b      	ldrh	r3, [r7, #10]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e001      	b.n	8000e26 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	821a      	strh	r2, [r3, #16]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <STM_EVAL_LEDInit+0x50>)
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe65 	bl	8000b3c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <STM_EVAL_LEDInit+0x54>)
 8000e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <STM_EVAL_LEDInit+0x58>)
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	f107 0208 	add.w	r2, r7, #8
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fd6c 	bl	8000978 <GPIO_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08001684 	.word	0x08001684
 8000eac:	08001680 	.word	0x08001680
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <STM_EVAL_LEDToggle+0x34>)
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <STM_EVAL_LEDToggle+0x34>)
 8000eca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ece:	6952      	ldr	r2, [r2, #20]
 8000ed0:	79f9      	ldrb	r1, [r7, #7]
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <STM_EVAL_LEDToggle+0x38>)
 8000ed4:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000ed8:	404a      	eors	r2, r1
 8000eda:	615a      	str	r2, [r3, #20]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	08001680 	.word	0x08001680

08000ef0 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 8000ef4:	4916      	ldr	r1, [pc, #88]	; (8000f50 <DMA1_Stream4_IRQHandler+0x60>)
 8000ef6:	4817      	ldr	r0, [pc, #92]	; (8000f54 <DMA1_Stream4_IRQHandler+0x64>)
 8000ef8:	f7ff fc38 	bl	800076c <DMA_GetFlagStatus>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d024      	beq.n	8000f4c <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8000f02:	2100      	movs	r1, #0
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <DMA1_Stream4_IRQHandler+0x64>)
 8000f06:	f7ff fc15 	bl	8000734 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8000f0a:	4911      	ldr	r1, [pc, #68]	; (8000f50 <DMA1_Stream4_IRQHandler+0x60>)
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <DMA1_Stream4_IRQHandler+0x64>)
 8000f0e:	f7ff fc69 	bl	80007e4 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <DMA1_Stream4_IRQHandler+0x68>)
 8000f14:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000f18:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000f1a:	e008      	b.n	8000f2e <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <DMA1_Stream4_IRQHandler+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <DMA1_Stream4_IRQHandler+0x68>)
 8000f24:	600a      	str	r2, [r1, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <DMA1_Stream4_IRQHandler+0x3e>
 8000f2a:	f000 fa55 	bl	80013d8 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000f2e:	490b      	ldr	r1, [pc, #44]	; (8000f5c <DMA1_Stream4_IRQHandler+0x6c>)
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <DMA1_Stream4_IRQHandler+0x70>)
 8000f32:	f7ff fdcf 	bl	8000ad4 <I2C_GetFlagStatus>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0ef      	beq.n	8000f1c <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <DMA1_Stream4_IRQHandler+0x70>)
 8000f40:	f7ff fda8 	bl	8000a94 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <DMA1_Stream4_IRQHandler+0x74>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000020 	.word	0x20000020
 8000f54:	40026070 	.word	0x40026070
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	10000004 	.word	0x10000004
 8000f60:	40005c00 	.word	0x40005c00
 8000f64:	2000002c 	.word	0x2000002c

08000f68 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8000f6c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000f72:	f7ff fbfb 	bl	800076c <DMA_GetFlagStatus>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d010      	beq.n	8000f9e <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <DMA1_Stream2_IRQHandler+0x40>)
 8000f80:	f7ff fd88 	bl	8000a94 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8000f84:	2100      	movs	r1, #0
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000f88:	f7ff fbd4 	bl	8000734 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8000f8c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000f92:	f7ff fc27 	bl	80007e4 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <DMA1_Stream2_IRQHandler+0x44>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40026040 	.word	0x40026040
 8000fa8:	40005c00 	.word	0x40005c00
 8000fac:	20000034 	.word	0x20000034

08000fb0 <EXTI0_IRQHandler>:
**  Abstract: main program
**
**===========================================================================
*/

void EXTI0_IRQHandler(void) {
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0

	//TODO: Make some variables global
	int vehicle_speed;
	int vehicle_speed_ascendent = 1; //1 = ascendent, 0 = descendent
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
	int vehicle_speeds[6] = {0,10,35,45,100,270};
 8000fba:	4b83      	ldr	r3, [pc, #524]	; (80011c8 <EXTI0_IRQHandler+0x218>)
 8000fbc:	f107 0414 	add.w	r4, r7, #20
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fca:	e884 0003 	stmia.w	r4, {r0, r1}
	int i = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c

	float wheel_speed_difference_factor[5] = {1, 1.25, 1.35, 1.8, 2.2};
 8000fd2:	4b7e      	ldr	r3, [pc, #504]	; (80011cc <EXTI0_IRQHandler+0x21c>)
 8000fd4:	463c      	mov	r4, r7
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	6023      	str	r3, [r4, #0]
	int difference_factor_ascendent = 1; //1 = ascendent, 0 = descendent
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
	int num_cycles = 0; //Number of times that we have arrived to/started from the initial speed difference factor (1)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	int calculating_right_speed = 0; //1 = calculating right speed, 0 = calculating left speed
 8000fe8:	2300      	movs	r3, #0
 8000fea:	643b      	str	r3, [r7, #64]	; 0x40
	float left_wheel_speed;
	int j;

	//TODO: Try not use floats for speed? (The project statement says so)

	if(EXTI_GetITStatus(EXTI_Line0) != 0){
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fc99 	bl	8000924 <EXTI_GetITStatus>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80de 	beq.w	80011b6 <EXTI0_IRQHandler+0x206>

		//CASE GPIO AUX LOW
		if (vehicle_speeds[i] == 0) {
 8000ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001002:	4413      	add	r3, r2
 8001004:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <EXTI0_IRQHandler+0x62>
			vehicle_speed_ascendent = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001010:	e00b      	b.n	800102a <EXTI0_IRQHandler+0x7a>
		} else if (vehicle_speeds[i] == 270) {
 8001012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800101a:	4413      	add	r3, r2
 800101c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001020:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001024:	d101      	bne.n	800102a <EXTI0_IRQHandler+0x7a>
			vehicle_speed_ascendent = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		if (vehicle_speed_ascendent == 1) {
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10b      	bne.n	8001048 <EXTI0_IRQHandler+0x98>
			vehicle_speed = vehicle_speeds[i];
 8001030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001038:	4413      	add	r3, r2
 800103a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
			i++;
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	3301      	adds	r3, #1
 8001044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001046:	e00a      	b.n	800105e <EXTI0_IRQHandler+0xae>
		} else {
			vehicle_speed = vehicle_speeds[i];
 8001048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001050:	4413      	add	r3, r2
 8001052:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
			i--;
 8001058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105a:	3b01      	subs	r3, #1
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
			//TODO: Check if i++ and i-- should be before or after. Or maybe just try to see it works, using the debugger
		}
		/////////////////////////

		//CASE GPIO AUX HIGH
		if (vehicle_speed != 0) {
 800105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 8094 	beq.w	800118e <EXTI0_IRQHandler+0x1de>

			if (wheel_speed_difference_factor[j] == 1) {
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800106e:	4413      	add	r3, r2
 8001070:	3b50      	subs	r3, #80	; 0x50
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800107a:	eef4 7a47 	vcmp.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d111      	bne.n	80010a8 <EXTI0_IRQHandler+0xf8>
				difference_factor_ascendent = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
				num_cycles++;
 8001088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800108a:	3301      	adds	r3, #1
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38

				if (num_cycles == 2) {
 800108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001090:	2b02      	cmp	r3, #2
 8001092:	d11d      	bne.n	80010d0 <EXTI0_IRQHandler+0x120>
					num_cycles = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
					calculating_right_speed = !calculating_right_speed; //TODO: Check that this turns a 1 into a 0 and viceversa
 8001098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
 80010a6:	e013      	b.n	80010d0 <EXTI0_IRQHandler+0x120>
				}
			} else if (wheel_speed_difference_factor[j] == 2.2) {
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010b0:	4413      	add	r3, r2
 80010b2:	3b50      	subs	r3, #80	; 0x50
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9fe 	bl	80004b8 <__aeabi_f2d>
 80010bc:	a340      	add	r3, pc, #256	; (adr r3, 80011c0 <EXTI0_IRQHandler+0x210>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff faa3 	bl	800060c <__aeabi_dcmpeq>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <EXTI0_IRQHandler+0x120>
				difference_factor_ascendent = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
			}

			if (difference_factor_ascendent == 1) {
 80010d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d12d      	bne.n	8001132 <EXTI0_IRQHandler+0x182>

				if (calculating_right_speed) {
 80010d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <EXTI0_IRQHandler+0x154>
					left_wheel_speed = wheel_speed_difference_factor[j];
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010e4:	4413      	add	r3, r2
 80010e6:	3b50      	subs	r3, #80	; 0x50
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
					right_wheel_speed = vehicle_speed * left_wheel_speed;
 80010ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001102:	e012      	b.n	800112a <EXTI0_IRQHandler+0x17a>
				} else {
					right_wheel_speed = wheel_speed_difference_factor[j];
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800110c:	4413      	add	r3, r2
 800110e:	3b50      	subs	r3, #80	; 0x50
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
					left_wheel_speed = vehicle_speed * right_wheel_speed;
 8001114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				}

				j++;
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	3301      	adds	r3, #1
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
 8001130:	e03b      	b.n	80011aa <EXTI0_IRQHandler+0x1fa>

			} else {

				if (calculating_right_speed) {
 8001132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <EXTI0_IRQHandler+0x1b0>
					left_wheel_speed = wheel_speed_difference_factor[j];
 8001138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001140:	4413      	add	r3, r2
 8001142:	3b50      	subs	r3, #80	; 0x50
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
					right_wheel_speed = vehicle_speed * left_wheel_speed;
 8001148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800115e:	e012      	b.n	8001186 <EXTI0_IRQHandler+0x1d6>
				} else {
					right_wheel_speed = wheel_speed_difference_factor[j];
 8001160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001168:	4413      	add	r3, r2
 800116a:	3b50      	subs	r3, #80	; 0x50
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
					left_wheel_speed = vehicle_speed * right_wheel_speed;
 8001170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800117e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001182:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				}

				j--;
 8001186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001188:	3b01      	subs	r3, #1
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
 800118c:	e00d      	b.n	80011aa <EXTI0_IRQHandler+0x1fa>


			}

		} else {
			right_wheel_speed = vehicle_speed;
 800118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			left_wheel_speed = vehicle_speed;
 800119c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30


		//////////////////


		STM_EVAL_LEDToggle(LED4);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fe82 	bl	8000eb4 <STM_EVAL_LEDToggle>
		EXTI_ClearITPendingBit(EXTI_Line0);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fbd1 	bl	8000958 <EXTI_ClearITPendingBit>
	}
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	40019999 	.word	0x40019999
 80011c8:	08001654 	.word	0x08001654
 80011cc:	0800166c 	.word	0x0800166c

080011d0 <init_PB_user>:

void init_PB_user(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80011d6:	2101      	movs	r1, #1
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fcaf 	bl	8000b3c <RCC_AHB1PeriphClockCmd>
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);	//TODO: Check if yes or no

	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 80011de:	2300      	movs	r3, #0
 80011e0:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Pin = GPIO_Pin_0;
 80011e6:	2301      	movs	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_config);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <init_PB_user+0x68>)
 80011f2:	f7ff fbc1 	bl	8000978 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 80011f6:	2100      	movs	r1, #0
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fcff 	bl	8000bfc <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line0;
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 8001202:	2300      	movs	r3, #0
 8001204:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 8001206:	2308      	movs	r3, #8
 8001208:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 800120a:	2301      	movs	r3, #1
 800120c:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fb14 	bl	8000840 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI0_IRQn;
 8001218:	2306      	movs	r3, #6
 800121a:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x07;
 800121c:	2307      	movs	r3, #7
 800121e:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 8001220:	2301      	movs	r3, #1
 8001222:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fa20 	bl	8000670 <NVIC_Init>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020000 	.word	0x40020000

0800123c <init_wheels_inputs>:

// Inits the input for each wheel
void init_wheels_inputs(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001242:	2101      	movs	r1, #1
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff fc79 	bl	8000b3c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800124a:	2101      	movs	r1, #1
 800124c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001250:	f7ff fcb4 	bl	8000bbc <RCC_APB2PeriphClockCmd>

	GPIO_config.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8001254:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001258:	613b      	str	r3, [r7, #16]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_UP;	// TODO: Check if pullups yes or no
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 800125e:	2300      	movs	r3, #0
 8001260:	753b      	strb	r3, [r7, #20]
	//GPIO_config.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_config);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <init_wheels_inputs+0x90>)
 800126a:	f7ff fb85 	bl	8000978 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 800126e:	210d      	movs	r1, #13
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fcc3 	bl	8000bfc <SYSCFG_EXTILineConfig>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource14);
 8001276:	210e      	movs	r1, #14
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff fcbf 	bl	8000bfc <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line13;
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 8001284:	2300      	movs	r3, #0
 8001286:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 8001288:	2308      	movs	r3, #8
 800128a:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 800128c:	2301      	movs	r3, #1
 800128e:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fad3 	bl	8000840 <EXTI_Init>
	EXTI_config.EXTI_Line = EXTI_Line14;
 800129a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129e:	60bb      	str	r3, [r7, #8]
	EXTI_Init(&EXTI_config);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff facb 	bl	8000840 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI15_10_IRQn;
 80012aa:	2328      	movs	r3, #40	; 0x28
 80012ac:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x02;
 80012ae:	2302      	movs	r3, #2
 80012b0:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 80012b2:	2301      	movs	r3, #1
 80012b4:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f9d7 	bl	8000670 <NVIC_Init>

}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40020800 	.word	0x40020800

080012d0 <TIM2_IRQHandler>:

// Executes the TIM2 RSI
void TIM2_IRQHandler(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != 0) {
 80012d4:	2101      	movs	r1, #1
 80012d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012da:	f7ff fd81 	bl	8000de0 <TIM_GetITStatus>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d014      	beq.n	800130e <TIM2_IRQHandler+0x3e>

		counter_led++;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <TIM2_IRQHandler+0x44>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <TIM2_IRQHandler+0x44>)
 80012ec:	6013      	str	r3, [r2, #0]
		if(counter_led >= 2000){
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <TIM2_IRQHandler+0x44>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012f6:	db05      	blt.n	8001304 <TIM2_IRQHandler+0x34>
			counter_led = 0;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <TIM2_IRQHandler+0x44>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
			STM_EVAL_LEDToggle(LED3);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fdd8 	bl	8000eb4 <STM_EVAL_LEDToggle>
		}

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001304:	2101      	movs	r1, #1
 8001306:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800130a:	f7ff fd93 	bl	8000e34 <TIM_ClearITPendingBit>
	}
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000028 	.word	0x20000028

08001318 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line13) != 0) {
 800131c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001320:	f7ff fb00 	bl	8000924 <EXTI_GetITStatus>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <EXTI15_10_IRQHandler+0x20>
    	STM_EVAL_LEDToggle(LED4);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fdc2 	bl	8000eb4 <STM_EVAL_LEDToggle>
        EXTI_ClearITPendingBit(EXTI_Line13);
 8001330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001334:	f7ff fb10 	bl	8000958 <EXTI_ClearITPendingBit>
    }
    if (EXTI_GetITStatus(EXTI_Line14) != 0) {
 8001338:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800133c:	f7ff faf2 	bl	8000924 <EXTI_GetITStatus>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <EXTI15_10_IRQHandler+0x3c>
    	STM_EVAL_LEDToggle(LED4);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fdb4 	bl	8000eb4 <STM_EVAL_LEDToggle>
        EXTI_ClearITPendingBit(EXTI_Line14);
 800134c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001350:	f7ff fb02 	bl	8000958 <EXTI_ClearITPendingBit>
    }
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <init_TIM2>:


// Inits TIM2 for 1ms interrupts
void init_TIM2(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800135e:	2101      	movs	r1, #1
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc0b 	bl	8000b7c <RCC_APB1PeriphClockCmd>

	TIM_TimerConfig.TIM_Prescaler = 17;
 8001366:	2311      	movs	r3, #17
 8001368:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 800136a:	2300      	movs	r3, #0
 800136c:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 4999;
 800136e:	f241 3387 	movw	r3, #4999	; 0x1387
 8001372:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &TIM_TimerConfig);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001380:	f7ff fc7e 	bl	8000c80 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8001384:	2201      	movs	r2, #1
 8001386:	2101      	movs	r1, #1
 8001388:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800138c:	f7ff fd04 	bl	8000d98 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM2_IRQn;
 8001390:	231c      	movs	r3, #28
 8001392:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x03;
 8001398:	2303      	movs	r3, #3
 800139a:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 800139c:	2301      	movs	r3, #1
 800139e:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f964 	bl	8000670 <NVIC_Init>

    TIM_Cmd(TIM2, ENABLE);
 80013a8:	2101      	movs	r1, #1
 80013aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013ae:	f7ff fcd3 	bl	8000d58 <TIM_Cmd>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <main>:

int main(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
	init_TIM2();
 80013be:	f7ff ffcb 	bl	8001358 <init_TIM2>
	init_wheels_inputs();
 80013c2:	f7ff ff3b 	bl	800123c <init_wheels_inputs>
	init_PB_user();
 80013c6:	f7ff ff03 	bl	80011d0 <init_PB_user>
	STM_EVAL_LEDInit(LED3);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fd44 	bl	8000e58 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fd41 	bl	8000e58 <STM_EVAL_LEDInit>


	/* Infinite loop */
	while (1){
 80013d6:	e7fe      	b.n	80013d6 <main+0x1c>

080013d8 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1){
 80013dc:	e7fe      	b.n	80013dc <sEE_TIMEOUT_UserCallback+0x4>
	...

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013e6:	e003      	b.n	80013f0 <LoopCopyDataInit>

080013e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ee:	3104      	adds	r1, #4

080013f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013f8:	d3f6      	bcc.n	80013e8 <CopyDataInit>
  ldr  r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013fc:	e002      	b.n	8001404 <LoopFillZerobss>

080013fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001400:	f842 3b04 	str.w	r3, [r2], #4

08001404 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001406:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001408:	d3f9      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140a:	f000 f841 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f000 f8f1 	bl	80015f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff ffd2 	bl	80013ba <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001418:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800141c:	08001694 	.word	0x08001694
  ldr  r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001424:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001428:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800142c:	20000038 	.word	0x20000038

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>

08001432 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001444:	e7fe      	b.n	8001444 <HardFault_Handler+0x4>

08001446 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800144a:	e7fe      	b.n	800144a <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler+0x4>

08001452 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001456:	e7fe      	b.n	8001456 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <SystemInit+0x60>)
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <SystemInit+0x60>)
 8001498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <SystemInit+0x64>)
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <SystemInit+0x64>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <SystemInit+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <SystemInit+0x64>)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <SystemInit+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <SystemInit+0x64>)
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <SystemInit+0x68>)
 80014ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <SystemInit+0x64>)
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <SystemInit+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80014de:	f000 f80d 	bl	80014fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <SystemInit+0x60>)
 80014e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e8:	609a      	str	r2, [r3, #8]
#endif
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	24003010 	.word	0x24003010

080014fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800150a:	4a36      	ldr	r2, [pc, #216]	; (80015e4 <SetSysClock+0xe8>)
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <SetSysClock+0xe8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <SetSysClock+0xe8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <SetSysClock+0x38>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001532:	d1f0      	bne.n	8001516 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <SetSysClock+0xe8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001540:	2301      	movs	r3, #1
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	e001      	b.n	800154a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d102      	bne.n	8001556 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <SetSysClock+0xe8>)
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <SetSysClock+0xec>)
 8001554:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <SetSysClock+0xe8>)
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SetSysClock+0xe8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001562:	4a22      	ldr	r2, [pc, #136]	; (80015ec <SetSysClock+0xf0>)
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <SetSysClock+0xf0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <SetSysClock+0xe8>)
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <SetSysClock+0xe8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <SetSysClock+0xe8>)
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <SetSysClock+0xe8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001580:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <SetSysClock+0xe8>)
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <SetSysClock+0xe8>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800158c:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <SetSysClock+0xe8>)
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <SetSysClock+0xe8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001598:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800159a:	bf00      	nop
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <SetSysClock+0xe8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f9      	beq.n	800159c <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SetSysClock+0xf4>)
 80015aa:	f240 7205 	movw	r2, #1797	; 0x705
 80015ae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <SetSysClock+0xe8>)
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <SetSysClock+0xe8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <SetSysClock+0xe8>)
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <SetSysClock+0xe8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80015c8:	bf00      	nop
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SetSysClock+0xe8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d1f9      	bne.n	80015ca <SetSysClock+0xce>
    {
    }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	07405a08 	.word	0x07405a08
 80015ec:	40007000 	.word	0x40007000
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <__libc_init_array>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4e0d      	ldr	r6, [pc, #52]	; (800162c <__libc_init_array+0x38>)
 80015f8:	4c0d      	ldr	r4, [pc, #52]	; (8001630 <__libc_init_array+0x3c>)
 80015fa:	1ba4      	subs	r4, r4, r6
 80015fc:	10a4      	asrs	r4, r4, #2
 80015fe:	2500      	movs	r5, #0
 8001600:	42a5      	cmp	r5, r4
 8001602:	d109      	bne.n	8001618 <__libc_init_array+0x24>
 8001604:	4e0b      	ldr	r6, [pc, #44]	; (8001634 <__libc_init_array+0x40>)
 8001606:	4c0c      	ldr	r4, [pc, #48]	; (8001638 <__libc_init_array+0x44>)
 8001608:	f000 f818 	bl	800163c <_init>
 800160c:	1ba4      	subs	r4, r4, r6
 800160e:	10a4      	asrs	r4, r4, #2
 8001610:	2500      	movs	r5, #0
 8001612:	42a5      	cmp	r5, r4
 8001614:	d105      	bne.n	8001622 <__libc_init_array+0x2e>
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800161c:	4798      	blx	r3
 800161e:	3501      	adds	r5, #1
 8001620:	e7ee      	b.n	8001600 <__libc_init_array+0xc>
 8001622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001626:	4798      	blx	r3
 8001628:	3501      	adds	r5, #1
 800162a:	e7f2      	b.n	8001612 <__libc_init_array+0x1e>
 800162c:	0800168c 	.word	0x0800168c
 8001630:	0800168c 	.word	0x0800168c
 8001634:	0800168c 	.word	0x0800168c
 8001638:	08001690 	.word	0x08001690

0800163c <_init>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	bf00      	nop
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr

08001648 <_fini>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	bf00      	nop
 800164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164e:	bc08      	pop	{r3}
 8001650:	469e      	mov	lr, r3
 8001652:	4770      	bx	lr
