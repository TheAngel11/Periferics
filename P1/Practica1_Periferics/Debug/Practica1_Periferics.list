
Practica1_Periferics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000070  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000088  20000088  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007b3b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015f0  00000000  00000000  00027b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa8  00000000  00000000  00029178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003987  00000000  00000000  0002a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035b8  00000000  00000000  0002df67  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003151f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f38  00000000  00000000  0003159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000344d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021ac 	.word	0x080021ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	080021ac 	.word	0x080021ac

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73bb      	strb	r3, [r7, #14]
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	78db      	ldrb	r3, [r3, #3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d039      	beq.n	8000b24 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <NVIC_Init+0xbc>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f1c3 0304 	rsb	r3, r3, #4
 8000ac6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ac8:	7b7a      	ldrb	r2, [r7, #13]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	fa42 f303 	asr.w	r3, r2, r3
 8000ad0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	789a      	ldrb	r2, [r3, #2]
 8000ae4:	7b7b      	ldrb	r3, [r7, #13]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <NVIC_Init+0xc0>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <NVIC_Init+0xc0>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b1e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b22:	e00f      	b.n	8000b44 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b24:	490b      	ldr	r1, [pc, #44]	; (8000b54 <NVIC_Init+0xc0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 031f 	and.w	r3, r3, #31
 8000b38:	2201      	movs	r2, #1
 8000b3a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b3c:	f100 0320 	add.w	r3, r0, #32
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <DAC_Init+0x64>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000b70:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b90:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <DAC_Init+0x64>)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007400 	.word	0x40007400

08000bc0 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d009      	beq.n	8000be6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <DAC_Cmd+0x48>)
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <DAC_Cmd+0x48>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2001      	movs	r0, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	fa00 f303 	lsl.w	r3, r0, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000be4:	e009      	b.n	8000bfa <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <DAC_Cmd+0x48>)
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <DAC_Cmd+0x48>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	2001      	movs	r0, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	fa00 f303 	lsl.w	r3, r0, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40007400 	.word	0x40007400

08000c0c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <DAC_SetChannel1Data+0x34>)
 8000c1e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	3308      	adds	r3, #8
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40007400 	.word	0x40007400

08000c44 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000c62:	e005      	b.n	8000c70 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 0201 	bic.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <DMA_GetFlagStatus+0x6c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d802      	bhi.n	8000c9c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <DMA_GetFlagStatus+0x70>)
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	e001      	b.n	8000ca0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <DMA_GetFlagStatus+0x74>)
 8000c9e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e002      	b.n	8000cb8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000cbe:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
 8000cd2:	e001      	b.n	8000cd8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	4002640f 	.word	0x4002640f
 8000cec:	40026000 	.word	0x40026000
 8000cf0:	40026400 	.word	0x40026400

08000cf4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <DMA_ClearFlag+0x50>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d802      	bhi.n	8000d0c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <DMA_ClearFlag+0x54>)
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e001      	b.n	8000d10 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <DMA_ClearFlag+0x58>)
 8000d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d20:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000d28:	e006      	b.n	8000d38 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d30:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6093      	str	r3, [r2, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	4002640f 	.word	0x4002640f
 8000d48:	40026000 	.word	0x40026000
 8000d4c:	40026400 	.word	0x40026400

08000d50 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <EXTI_Init+0xe0>)
 8000d5e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d04f      	beq.n	8000e08 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d68:	4931      	ldr	r1, [pc, #196]	; (8000e30 <EXTI_Init+0xe0>)
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <EXTI_Init+0xe0>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d78:	492d      	ldr	r1, [pc, #180]	; (8000e30 <EXTI_Init+0xe0>)
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <EXTI_Init+0xe0>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4013      	ands	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	6811      	ldr	r1, [r2, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000da2:	4923      	ldr	r1, [pc, #140]	; (8000e30 <EXTI_Init+0xe0>)
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <EXTI_Init+0xe0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4013      	ands	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000db2:	491f      	ldr	r1, [pc, #124]	; (8000e30 <EXTI_Init+0xe0>)
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <EXTI_Init+0xe0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	795b      	ldrb	r3, [r3, #5]
 8000dc6:	2b10      	cmp	r3, #16
 8000dc8:	d10e      	bne.n	8000de8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dca:	4919      	ldr	r1, [pc, #100]	; (8000e30 <EXTI_Init+0xe0>)
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <EXTI_Init+0xe0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000dd8:	4915      	ldr	r1, [pc, #84]	; (8000e30 <EXTI_Init+0xe0>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <EXTI_Init+0xe0>)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000de6:	e01d      	b.n	8000e24 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <EXTI_Init+0xe0>)
 8000dea:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	461a      	mov	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	e00d      	b.n	8000e24 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	6811      	ldr	r1, [r2, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	43d2      	mvns	r2, r2
 8000e20:	400a      	ands	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40013c00 	.word	0x40013c00

08000e34 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <EXTI_GetITStatus+0x30>)
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e001      	b.n	8000e56 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <EXTI_ClearITPendingBit+0x1c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6153      	str	r3, [r2, #20]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40013c00 	.word	0x40013c00

08000e88 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e076      	b.n	8000f92 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d165      	bne.n	8000f8c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2103      	movs	r1, #3
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	791b      	ldrb	r3, [r3, #4]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d003      	beq.n	8000efe <GPIO_Init+0x76>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d12e      	bne.n	8000f5c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2103      	movs	r1, #3
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	795b      	ldrb	r3, [r3, #5]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	2301      	movs	r3, #1
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	7992      	ldrb	r2, [r2, #6]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	b292      	uxth	r2, r2
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2103      	movs	r1, #3
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d985      	bls.n	8000ea4 <GPIO_Init+0x1c>
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	405a      	eors	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	615a      	str	r2, [r3, #20]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800101e:	e007      	b.n	8001030 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800102a:	b29a      	uxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	801a      	strh	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0f1b      	lsrs	r3, r3, #28
 800105a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001062:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3314      	adds	r3, #20
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e005      	b.n	800107e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3318      	adds	r3, #24
 800107c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800108a:	2301      	movs	r3, #1
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	e001      	b.n	8001094 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001094:	7dfb      	ldrb	r3, [r7, #23]
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80010c2:	e006      	b.n	80010d2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 80010fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001102:	e006      	b.n	8001112 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 8001108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	43db      	mvns	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 800113a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001142:	e006      	b.n	8001152 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001144:	4906      	ldr	r1, [pc, #24]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	43db      	mvns	r3, r3
 800114e:	4013      	ands	r3, r2
 8001150:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001164:	b490      	push	{r4, r7}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001188:	4916      	ldr	r1, [pc, #88]	; (80011e4 <SYSCFG_EXTILineConfig+0x80>)
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <SYSCFG_EXTILineConfig+0x80>)
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3302      	adds	r3, #2
 800119c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	1c83      	adds	r3, r0, #2
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <SYSCFG_EXTILineConfig+0x80>)
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461c      	mov	r4, r3
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <SYSCFG_EXTILineConfig+0x80>)
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c4:	79f9      	ldrb	r1, [r7, #7]
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	431a      	orrs	r2, r3
 80011d4:	1ca3      	adds	r3, r4, #2
 80011d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc90      	pop	{r4, r7}
 80011e2:	4770      	bx	lr
 80011e4:	40013800 	.word	0x40013800

080011e8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <TIM_TimeBaseInit+0xbc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <TIM_TimeBaseInit+0x44>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <TIM_TimeBaseInit+0xc0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00f      	beq.n	800122c <TIM_TimeBaseInit+0x44>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001212:	d00b      	beq.n	800122c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <TIM_TimeBaseInit+0xc4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <TIM_TimeBaseInit+0x44>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <TIM_TimeBaseInit+0xc8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d003      	beq.n	800122c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <TIM_TimeBaseInit+0xcc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d108      	bne.n	800123e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001232:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	885a      	ldrh	r2, [r3, #2]
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	4313      	orrs	r3, r2
 800123c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <TIM_TimeBaseInit+0xd0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00c      	beq.n	8001260 <TIM_TimeBaseInit+0x78>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <TIM_TimeBaseInit+0xd4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d008      	beq.n	8001260 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001254:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	891a      	ldrh	r2, [r3, #8]
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	4313      	orrs	r3, r2
 800125e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	89fa      	ldrh	r2, [r7, #14]
 8001264:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <TIM_TimeBaseInit+0xbc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d003      	beq.n	8001286 <TIM_TimeBaseInit+0x9e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <TIM_TimeBaseInit+0xc0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d104      	bne.n	8001290 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	7a9b      	ldrb	r3, [r3, #10]
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	829a      	strh	r2, [r3, #20]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40010400 	.word	0x40010400
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40000c00 	.word	0x40000c00
 80012b8:	40001000 	.word	0x40001000
 80012bc:	40001400 	.word	0x40001400

080012c0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80012e2:	e007      	b.n	80012f4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	801a      	strh	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	899b      	ldrh	r3, [r3, #12]
 800131a:	b29a      	uxth	r2, r3
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4313      	orrs	r3, r2
 8001320:	b29a      	uxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001326:	e009      	b.n	800133c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	899b      	ldrh	r3, [r3, #12]
 800132c:	b29a      	uxth	r2, r3
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	43db      	mvns	r3, r3
 8001332:	b29b      	uxth	r3, r3
 8001334:	4013      	ands	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	819a      	strh	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
 800135c:	2300      	movs	r3, #0
 800135e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	8a1b      	ldrh	r3, [r3, #16]
 8001364:	b29a      	uxth	r2, r3
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	4013      	ands	r3, r2
 800136a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	b29a      	uxth	r2, r3
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	4013      	ands	r3, r2
 8001376:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001378:	89bb      	ldrh	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <TIM_GetITStatus+0x42>
 800137e:	897b      	ldrh	r3, [r7, #10]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e001      	b.n	800138e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	821a      	strh	r2, [r3, #16]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <STM_EVAL_LEDInit+0x50>)
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe65 	bl	80010a4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <STM_EVAL_LEDInit+0x54>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80013e4:	2301      	movs	r3, #1
 80013e6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013f0:	2302      	movs	r3, #2
 80013f2:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <STM_EVAL_LEDInit+0x58>)
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	f107 0208 	add.w	r2, r7, #8
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd40 	bl	8000e88 <GPIO_Init>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	080021f4 	.word	0x080021f4
 8001414:	080021f0 	.word	0x080021f0
 8001418:	20000000 	.word	0x20000000

0800141c <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <STM_EVAL_LEDToggle+0x34>)
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <STM_EVAL_LEDToggle+0x34>)
 8001432:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001436:	6952      	ldr	r2, [r2, #20]
 8001438:	79f9      	ldrb	r1, [r7, #7]
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <STM_EVAL_LEDToggle+0x38>)
 800143c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001440:	404a      	eors	r2, r1
 8001442:	615a      	str	r2, [r3, #20]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000000 	.word	0x20000000
 8001454:	080021f0 	.word	0x080021f0

08001458 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <DMA1_Stream4_IRQHandler+0x60>)
 800145e:	4817      	ldr	r0, [pc, #92]	; (80014bc <DMA1_Stream4_IRQHandler+0x64>)
 8001460:	f7ff fc0c 	bl	8000c7c <DMA_GetFlagStatus>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d024      	beq.n	80014b4 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800146a:	2100      	movs	r1, #0
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <DMA1_Stream4_IRQHandler+0x64>)
 800146e:	f7ff fbe9 	bl	8000c44 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8001472:	4911      	ldr	r1, [pc, #68]	; (80014b8 <DMA1_Stream4_IRQHandler+0x60>)
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <DMA1_Stream4_IRQHandler+0x64>)
 8001476:	f7ff fc3d 	bl	8000cf4 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <DMA1_Stream4_IRQHandler+0x68>)
 800147c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001480:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001482:	e008      	b.n	8001496 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <DMA1_Stream4_IRQHandler+0x68>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <DMA1_Stream4_IRQHandler+0x68>)
 800148c:	600a      	str	r2, [r1, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <DMA1_Stream4_IRQHandler+0x3e>
 8001492:	f000 fd59 	bl	8001f48 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <DMA1_Stream4_IRQHandler+0x6c>)
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <DMA1_Stream4_IRQHandler+0x70>)
 800149a:	f7ff fdcf 	bl	800103c <I2C_GetFlagStatus>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ef      	beq.n	8001484 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 80014a4:	2101      	movs	r1, #1
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <DMA1_Stream4_IRQHandler+0x70>)
 80014a8:	f7ff fda8 	bl	8000ffc <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <DMA1_Stream4_IRQHandler+0x74>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  }
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000020 	.word	0x20000020
 80014bc:	40026070 	.word	0x40026070
 80014c0:	20000008 	.word	0x20000008
 80014c4:	10000004 	.word	0x10000004
 80014c8:	40005c00 	.word	0x40005c00
 80014cc:	20000074 	.word	0x20000074

080014d0 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 80014d4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <DMA1_Stream2_IRQHandler+0x3c>)
 80014da:	f7ff fbcf 	bl	8000c7c <DMA_GetFlagStatus>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d010      	beq.n	8001506 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 80014e4:	2101      	movs	r1, #1
 80014e6:	480a      	ldr	r0, [pc, #40]	; (8001510 <DMA1_Stream2_IRQHandler+0x40>)
 80014e8:	f7ff fd88 	bl	8000ffc <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <DMA1_Stream2_IRQHandler+0x3c>)
 80014f0:	f7ff fba8 	bl	8000c44 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 80014f4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <DMA1_Stream2_IRQHandler+0x3c>)
 80014fa:	f7ff fbfb 	bl	8000cf4 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <DMA1_Stream2_IRQHandler+0x44>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	801a      	strh	r2, [r3, #0]
  }
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40026040 	.word	0x40026040
 8001510:	40005c00 	.word	0x40005c00
 8001514:	2000007c 	.word	0x2000007c

08001518 <TIM5_IRQHandler>:
int ms_since_edge_rising = 0;
int bouncing_counter_ms = 0;
int last_bouncing_counter_ms = 0;

// Executes the TIM5 RSI
void TIM5_IRQHandler(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != 0) {
 800151c:	2101      	movs	r1, #1
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <TIM5_IRQHandler+0x78>)
 8001520:	f7ff ff12 	bl	8001348 <TIM_GetITStatus>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d02f      	beq.n	800158a <TIM5_IRQHandler+0x72>


		signal1_microseconds+=50;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <TIM5_IRQHandler+0x7c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3332      	adds	r3, #50	; 0x32
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <TIM5_IRQHandler+0x7c>)
 8001532:	6013      	str	r3, [r2, #0]
		signal2_microseconds+=50;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <TIM5_IRQHandler+0x80>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3332      	adds	r3, #50	; 0x32
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <TIM5_IRQHandler+0x80>)
 800153c:	6013      	str	r3, [r2, #0]

		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 800153e:	2101      	movs	r1, #1
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <TIM5_IRQHandler+0x78>)
 8001542:	f7ff ff2b 	bl	800139c <TIM_ClearITPendingBit>

		if (signal1_microseconds >= (right_wheel_signal_period_us / 2)) {
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <TIM5_IRQHandler+0x84>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0fda      	lsrs	r2, r3, #31
 800154c:	4413      	add	r3, r2
 800154e:	105b      	asrs	r3, r3, #1
 8001550:	461a      	mov	r2, r3
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <TIM5_IRQHandler+0x7c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	dc06      	bgt.n	8001568 <TIM5_IRQHandler+0x50>
			GPIO_ToggleBits(GPIOG, GPIO_Pin_0);
 800155a:	2101      	movs	r1, #1
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <TIM5_IRQHandler+0x88>)
 800155e:	f7ff fd3b 	bl	8000fd8 <GPIO_ToggleBits>
			signal1_microseconds = 0;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <TIM5_IRQHandler+0x7c>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
		}

		if (signal2_microseconds >= (left_wheel_signal_period_us / 2)) {
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <TIM5_IRQHandler+0x8c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	461a      	mov	r2, r3
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <TIM5_IRQHandler+0x80>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	dc06      	bgt.n	800158a <TIM5_IRQHandler+0x72>
			GPIO_ToggleBits(GPIOG, GPIO_Pin_1);
 800157c:	2102      	movs	r1, #2
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <TIM5_IRQHandler+0x88>)
 8001580:	f7ff fd2a 	bl	8000fd8 <GPIO_ToggleBits>
			signal2_microseconds = 0;
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <TIM5_IRQHandler+0x80>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
		}

		//TIM_SetCounter(TIM5, 0);
	}
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40000c00 	.word	0x40000c00
 8001594:	20000060 	.word	0x20000060
 8001598:	20000064 	.word	0x20000064
 800159c:	20000084 	.word	0x20000084
 80015a0:	40021800 	.word	0x40021800
 80015a4:	20000080 	.word	0x20000080

080015a8 <_calculate_final_signal>:

// Function that calculates the Vc signal from We and Wd
void _calculate_final_signal(void){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	unsigned int minW;
	unsigned int maxW;
	int Vc;

	if (Wd > We) {
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <_calculate_final_signal+0x168>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b58      	ldr	r3, [pc, #352]	; (8001714 <_calculate_final_signal+0x16c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d906      	bls.n	80015c8 <_calculate_final_signal+0x20>
		minW = We;
 80015ba:	4b56      	ldr	r3, [pc, #344]	; (8001714 <_calculate_final_signal+0x16c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
		maxW = Wd;
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <_calculate_final_signal+0x168>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	e005      	b.n	80015d4 <_calculate_final_signal+0x2c>
	} else {
		minW = Wd;
 80015c8:	4b51      	ldr	r3, [pc, #324]	; (8001710 <_calculate_final_signal+0x168>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
		maxW = We;
 80015ce:	4b51      	ldr	r3, [pc, #324]	; (8001714 <_calculate_final_signal+0x16c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60bb      	str	r3, [r7, #8]
	}

	// Middle point of the signal
	if (minW <= 1111/2 || minW * 1.3 >= maxW){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f5b3 7f0b 	cmp.w	r3, #556	; 0x22c
 80015da:	d317      	bcc.n	800160c <_calculate_final_signal+0x64>
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7fe ff49 	bl	8000474 <__aeabi_ui2d>
 80015e2:	a349      	add	r3, pc, #292	; (adr r3, 8001708 <_calculate_final_signal+0x160>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7fe ffba 	bl	8000560 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4625      	mov	r5, r4
 80015f2:	461c      	mov	r4, r3
 80015f4:	68b8      	ldr	r0, [r7, #8]
 80015f6:	f7fe ff3d 	bl	8000474 <__aeabi_ui2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff fa33 	bl	8000a6c <__aeabi_dcmpge>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <_calculate_final_signal+0x70>
		DAC_SetChannel1Data(DAC_Align_12b_R, 2048);
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fafb 	bl	8000c0c <DAC_SetChannel1Data>
		return;
 8001616:	e074      	b.n	8001702 <_calculate_final_signal+0x15a>
	}

	// Right side of the signal
	if ((maxW - minW)/minW >= 1 && maxW == We){
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad2      	subs	r2, r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <_calculate_final_signal+0x94>
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <_calculate_final_signal+0x16c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	429a      	cmp	r2, r3
 8001630:	d104      	bne.n	800163c <_calculate_final_signal+0x94>
		DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 8001632:	2100      	movs	r1, #0
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fae9 	bl	8000c0c <DAC_SetChannel1Data>
		return;
 800163a:	e062      	b.n	8001702 <_calculate_final_signal+0x15a>
	}

	// Left side of the signal
	if ((maxW - minW)/minW >= 1 && maxW == Wd){
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad2      	subs	r2, r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <_calculate_final_signal+0xba>
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <_calculate_final_signal+0x168>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d105      	bne.n	8001662 <_calculate_final_signal+0xba>
		DAC_SetChannel1Data(DAC_Align_12b_R, 4095);
 8001656:	f640 71ff 	movw	r1, #4095	; 0xfff
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fad6 	bl	8000c0c <DAC_SetChannel1Data>
		return;
 8001660:	e04f      	b.n	8001702 <_calculate_final_signal+0x15a>
	}

	// Middle - Right side of the signal: Y = 2925X + 1170
	if(maxW == Wd) {
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <_calculate_final_signal+0x168>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	d122      	bne.n	80016b2 <_calculate_final_signal+0x10a>
		Vc = (int)(2925 * ((float)(Wd - We) / We)) + 1170;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <_calculate_final_signal+0x168>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <_calculate_final_signal+0x16c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <_calculate_final_signal+0x16c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800168a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001718 <_calculate_final_signal+0x170>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169a:	ee17 3a90 	vmov	r3, s15
 800169e:	f203 4392 	addw	r3, r3, #1170	; 0x492
 80016a2:	607b      	str	r3, [r7, #4]
		DAC_SetChannel1Data(DAC_Align_12b_R, Vc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff faae 	bl	8000c0c <DAC_SetChannel1Data>
		return;
 80016b0:	e027      	b.n	8001702 <_calculate_final_signal+0x15a>
	}

	// Middle - Left side of the signal: Y = -2925X + 2925
	if(maxW == We) {
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <_calculate_final_signal+0x16c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d122      	bne.n	8001702 <_calculate_final_signal+0x15a>
		Vc = (int)(-2925 * ((float)(We - Wd) / Wd)) + 2925;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_calculate_final_signal+0x16c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_calculate_final_signal+0x168>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_calculate_final_signal+0x168>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800171c <_calculate_final_signal+0x174>
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	f603 336d 	addw	r3, r3, #2925	; 0xb6d
 80016f2:	607b      	str	r3, [r7, #4]
		DAC_SetChannel1Data(DAC_Align_12b_R, Vc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fa86 	bl	8000c0c <DAC_SetChannel1Data>
		return;
 8001700:	bf00      	nop
	}
}
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bdb0      	pop	{r4, r5, r7, pc}
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	3ff4cccc 	.word	0x3ff4cccc
 8001710:	20000038 	.word	0x20000038
 8001714:	2000003c 	.word	0x2000003c
 8001718:	4536d000 	.word	0x4536d000
 800171c:	c536d000 	.word	0xc536d000

08001720 <init_wheel_signal_ouput>:

void init_wheel_signal_ouput(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001726:	2101      	movs	r1, #1
 8001728:	2040      	movs	r0, #64	; 0x40
 800172a:	f7ff fcbb 	bl	80010a4 <RCC_AHB1PeriphClockCmd>

	GPIO_config.GPIO_Mode = GPIO_Mode_OUT;
 800172e:	2301      	movs	r3, #1
 8001730:	713b      	strb	r3, [r7, #4]
	GPIO_config.GPIO_OType = GPIO_OType_PP;
 8001732:	2300      	movs	r3, #0
 8001734:	71bb      	strb	r3, [r7, #6]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
	GPIO_config.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800173a:	2303      	movs	r3, #3
 800173c:	603b      	str	r3, [r7, #0]
	GPIO_config.GPIO_Speed = GPIO_Speed_100MHz;
 800173e:	2303      	movs	r3, #3
 8001740:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOG, &GPIO_config);
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <init_wheel_signal_ouput+0x34>)
 8001748:	f7ff fb9e 	bl	8000e88 <GPIO_Init>
	GPIO_config.GPIO_OType = GPIO_OType_PP;
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_config.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4;	//TODO: treure el 4
	GPIO_config.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOE, &GPIO_config);*/
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021800 	.word	0x40021800

08001758 <init_TIM5>:

// Inits TIM5 for 1us interrupts
void init_TIM5(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
	//TODOTODOTODO: Find values that make the timer error zero (now is near zero, but not zero)

	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800175e:	2101      	movs	r1, #1
 8001760:	2008      	movs	r0, #8
 8001762:	f7ff fcbf 	bl	80010e4 <RCC_APB1PeriphClockCmd>

	TIM_TimerConfig.TIM_Prescaler = 41;
 8001766:	2329      	movs	r3, #41	; 0x29
 8001768:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 800176a:	2300      	movs	r3, #0
 800176c:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 106;
 800176e:	236a      	movs	r3, #106	; 0x6a
 8001770:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM5, &TIM_TimerConfig);
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <init_TIM5+0x5c>)
 800177c:	f7ff fd34 	bl	80011e8 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8001780:	2201      	movs	r2, #1
 8001782:	2101      	movs	r1, #1
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <init_TIM5+0x5c>)
 8001786:	f7ff fdbb 	bl	8001300 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM5_IRQn;
 800178a:	2332      	movs	r3, #50	; 0x32
 800178c:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x02;
 8001792:	2302      	movs	r3, #2
 8001794:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 8001796:	2301      	movs	r3, #1
 8001798:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 800179a:	463b      	mov	r3, r7
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f979 	bl	8000a94 <NVIC_Init>

    TIM_Cmd(TIM5, ENABLE);
 80017a2:	2101      	movs	r1, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <init_TIM5+0x5c>)
 80017a6:	f7ff fd8b 	bl	80012c0 <TIM_Cmd>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40000c00 	.word	0x40000c00

080017b8 <EXTI0_IRQHandler>:


int rebounds_counter = 0;

//User PB RSI
void EXTI0_IRQHandler(void) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b092      	sub	sp, #72	; 0x48
 80017bc:	af00      	add	r7, sp, #0
			bouncing_counter_ms = 0;
	}

	ms_since_edge_rising = 0;*/

	if (bouncing_counter_ms - last_bouncing_counter_ms > MAX_BOUNCES_MS) {
 80017be:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <EXTI0_IRQHandler+0x294>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <EXTI0_IRQHandler+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017cc:	f340 81cf 	ble.w	8001b6e <EXTI0_IRQHandler+0x3b6>
		last_bouncing_counter_ms = bouncing_counter_ms;
 80017d0:	4b9e      	ldr	r3, [pc, #632]	; (8001a4c <EXTI0_IRQHandler+0x294>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a9e      	ldr	r2, [pc, #632]	; (8001a50 <EXTI0_IRQHandler+0x298>)
 80017d6:	6013      	str	r3, [r2, #0]
		rebounds_counter++;
 80017d8:	4b9e      	ldr	r3, [pc, #632]	; (8001a54 <EXTI0_IRQHandler+0x29c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a9d      	ldr	r2, [pc, #628]	; (8001a54 <EXTI0_IRQHandler+0x29c>)
 80017e0:	6013      	str	r3, [r2, #0]


		/////////////////////
		int vehicle_speeds[6] = {0,10,35,45,100,270};
 80017e2:	4b9d      	ldr	r3, [pc, #628]	; (8001a58 <EXTI0_IRQHandler+0x2a0>)
 80017e4:	f107 0418 	add.w	r4, r7, #24
 80017e8:	461d      	mov	r5, r3
 80017ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017f2:	e884 0003 	stmia.w	r4, {r0, r1}

			float wheel_speed_difference_factor[5] = {1, 1.25, 1.35, 1.8, 2.2};
 80017f6:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <EXTI0_IRQHandler+0x2a4>)
 80017f8:	1d3c      	adds	r4, r7, #4
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	6023      	str	r3, [r4, #0]

			// We disable the timer to reduce the BW when the speed is less than 40Km/h and the difference factor is less than 1.3
			if (i < 2 && j < 3){
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	dc08      	bgt.n	800181e <EXTI0_IRQHandler+0x66>
 800180c:	4b95      	ldr	r3, [pc, #596]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	dc04      	bgt.n	800181e <EXTI0_IRQHandler+0x66>
				TIM_Cmd(TIM3, DISABLE);
 8001814:	2100      	movs	r1, #0
 8001816:	4894      	ldr	r0, [pc, #592]	; (8001a68 <EXTI0_IRQHandler+0x2b0>)
 8001818:	f7ff fd52 	bl	80012c0 <TIM_Cmd>
 800181c:	e003      	b.n	8001826 <EXTI0_IRQHandler+0x6e>
			} else {
				TIM_Cmd(TIM3, ENABLE);
 800181e:	2101      	movs	r1, #1
 8001820:	4891      	ldr	r0, [pc, #580]	; (8001a68 <EXTI0_IRQHandler+0x2b0>)
 8001822:	f7ff fd4d 	bl	80012c0 <TIM_Cmd>
			}

			if(EXTI_GetITStatus(EXTI_Line0) != 0) {
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fb04 	bl	8000e34 <EXTI_GetITStatus>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 819d 	beq.w	8001b6e <EXTI0_IRQHandler+0x3b6>

				if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_15) == 0) {
 8001834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001838:	488c      	ldr	r0, [pc, #560]	; (8001a6c <EXTI0_IRQHandler+0x2b4>)
 800183a:	f7ff fbb3 	bl	8000fa4 <GPIO_ReadInputDataBit>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d13f      	bne.n	80018c4 <EXTI0_IRQHandler+0x10c>

					//CASE GPIO AUX C15 LOW
					if (vehicle_speeds[i] == 0) {
 8001844:	4b86      	ldr	r3, [pc, #536]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800184e:	4413      	add	r3, r2
 8001850:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <EXTI0_IRQHandler+0xa8>
						vehicle_speed_ascendent = 1;
 8001858:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <EXTI0_IRQHandler+0x2b8>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00d      	b.n	800187c <EXTI0_IRQHandler+0xc4>
					} else if (vehicle_speeds[i] == 270) {
 8001860:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800186a:	4413      	add	r3, r2
 800186c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001870:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001874:	d102      	bne.n	800187c <EXTI0_IRQHandler+0xc4>
						vehicle_speed_ascendent = 0;
 8001876:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <EXTI0_IRQHandler+0x2b8>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
					}

					if (vehicle_speed_ascendent == 1) {
 800187c:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <EXTI0_IRQHandler+0x2b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10f      	bne.n	80018a4 <EXTI0_IRQHandler+0xec>
						vehicle_speed = vehicle_speeds[i];
 8001884:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800188e:	4413      	add	r3, r2
 8001890:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001894:	4a77      	ldr	r2, [pc, #476]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 8001896:	6013      	str	r3, [r2, #0]
						i++;
 8001898:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a70      	ldr	r2, [pc, #448]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e107      	b.n	8001ab4 <EXTI0_IRQHandler+0x2fc>
					} else {
						vehicle_speed = vehicle_speeds[i];
 80018a4:	4b6e      	ldr	r3, [pc, #440]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80018ae:	4413      	add	r3, r2
 80018b0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80018b4:	4a6f      	ldr	r2, [pc, #444]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 80018b6:	6013      	str	r3, [r2, #0]
						i--;
 80018b8:	4b69      	ldr	r3, [pc, #420]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	4a68      	ldr	r2, [pc, #416]	; (8001a60 <EXTI0_IRQHandler+0x2a8>)
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e0f7      	b.n	8001ab4 <EXTI0_IRQHandler+0x2fc>

				} else {

					//STM_EVAL_LEDOff(LED4);
					//CASE GPIO AUX C15 HIGH
					if (vehicle_speed != 0) {
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80e1 	beq.w	8001a90 <EXTI0_IRQHandler+0x2d8>

						if (wheel_speed_difference_factor[j] == 1) {
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80018d8:	4413      	add	r3, r2
 80018da:	3b44      	subs	r3, #68	; 0x44
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018e4:	eef4 7a47 	vcmp.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d119      	bne.n	8001922 <EXTI0_IRQHandler+0x16a>
							difference_factor_ascendent = 1;
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <EXTI0_IRQHandler+0x2c0>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
							num_cycles++;
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <EXTI0_IRQHandler+0x2c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a60      	ldr	r2, [pc, #384]	; (8001a7c <EXTI0_IRQHandler+0x2c4>)
 80018fc:	6013      	str	r3, [r2, #0]

							if (num_cycles == 2) {
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <EXTI0_IRQHandler+0x2c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d120      	bne.n	8001948 <EXTI0_IRQHandler+0x190>
								num_cycles = 1;
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <EXTI0_IRQHandler+0x2c4>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
								calculating_right_speed = !calculating_right_speed;
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <EXTI0_IRQHandler+0x2c8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <EXTI0_IRQHandler+0x2c8>)
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e012      	b.n	8001948 <EXTI0_IRQHandler+0x190>
							}
						} else if (wheel_speed_difference_factor[j] == (float) 2.2) {
 8001922:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800192c:	4413      	add	r3, r2
 800192e:	3b44      	subs	r3, #68	; 0x44
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001a84 <EXTI0_IRQHandler+0x2cc>
 8001938:	eef4 7a47 	vcmp.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	d102      	bne.n	8001948 <EXTI0_IRQHandler+0x190>
							difference_factor_ascendent = 0;
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <EXTI0_IRQHandler+0x2c0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
						}

						if (difference_factor_ascendent == 1) {
 8001948:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <EXTI0_IRQHandler+0x2c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d13e      	bne.n	80019ce <EXTI0_IRQHandler+0x216>

							if (calculating_right_speed) {
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <EXTI0_IRQHandler+0x2c8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01a      	beq.n	800198e <EXTI0_IRQHandler+0x1d6>
								left_wheel_speed = vehicle_speed;
 8001958:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 8001966:	edc3 7a00 	vstr	s15, [r3]
								right_wheel_speed = wheel_speed_difference_factor[j] * left_wheel_speed;
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001974:	4413      	add	r3, r2
 8001976:	3b44      	subs	r3, #68	; 0x44
 8001978:	ed93 7a00 	vldr	s14, [r3]
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 8001988:	edc3 7a00 	vstr	s15, [r3]
 800198c:	e019      	b.n	80019c2 <EXTI0_IRQHandler+0x20a>
							} else {
								right_wheel_speed = vehicle_speed;
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 800199c:	edc3 7a00 	vstr	s15, [r3]
								left_wheel_speed = wheel_speed_difference_factor[j] * right_wheel_speed;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019aa:	4413      	add	r3, r2
 80019ac:	3b44      	subs	r3, #68	; 0x44
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
							}
							//left = left_wheel_speed;
							//right = right_wheel_speed;
							j++;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e072      	b.n	8001ab4 <EXTI0_IRQHandler+0x2fc>

						} else {

							if (calculating_right_speed) {
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <EXTI0_IRQHandler+0x2c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <EXTI0_IRQHandler+0x254>
								left_wheel_speed = vehicle_speed;
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
								right_wheel_speed = wheel_speed_difference_factor[j] * left_wheel_speed;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019f2:	4413      	add	r3, r2
 80019f4:	3b44      	subs	r3, #68	; 0x44
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
 8001a0a:	e019      	b.n	8001a40 <EXTI0_IRQHandler+0x288>
							} else {
								right_wheel_speed = vehicle_speed;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <EXTI0_IRQHandler+0x2bc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
								left_wheel_speed = wheel_speed_difference_factor[j] * right_wheel_speed;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b44      	subs	r3, #68	; 0x44
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <EXTI0_IRQHandler+0x2d4>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <EXTI0_IRQHandler+0x2d0>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
							}

							//left = left_wheel_speed;
							//right = right_wheel_speed;
							j--;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <EXTI0_IRQHandler+0x2ac>)
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e033      	b.n	8001ab4 <EXTI0_IRQHandler+0x2fc>
 8001a4c:	20000068 	.word	0x20000068
 8001a50:	2000006c 	.word	0x2000006c
 8001a54:	20000070 	.word	0x20000070
 8001a58:	080021c4 	.word	0x080021c4
 8001a5c:	080021dc 	.word	0x080021dc
 8001a60:	20000048 	.word	0x20000048
 8001a64:	2000005c 	.word	0x2000005c
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	20000010 	.word	0x20000010
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	2000004c 	.word	0x2000004c
 8001a80:	20000050 	.word	0x20000050
 8001a84:	400ccccd 	.word	0x400ccccd
 8001a88:	20000058 	.word	0x20000058
 8001a8c:	20000054 	.word	0x20000054

					} else {
						//left = vehicle_speed;
						//right = vehicle_speed;

						right_wheel_speed = vehicle_speed;
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <EXTI0_IRQHandler+0x3c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <EXTI0_IRQHandler+0x3c4>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
						left_wheel_speed = vehicle_speed;
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <EXTI0_IRQHandler+0x3c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <EXTI0_IRQHandler+0x3c8>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]

					//////////////////
				}

				//We convert km/h to m/s
				float right_wheel_speed_meters_per_second = (right_wheel_speed * 1000) / 3600;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <EXTI0_IRQHandler+0x3c4>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001b84 <EXTI0_IRQHandler+0x3cc>
 8001abe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001b88 <EXTI0_IRQHandler+0x3d0>
 8001ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float left_wheel_speed_meters_per_second = (left_wheel_speed * 1000) / 3600;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <EXTI0_IRQHandler+0x3c8>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b84 <EXTI0_IRQHandler+0x3cc>
 8001ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001adc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001b88 <EXTI0_IRQHandler+0x3d0>
 8001ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

				//We convert from m/s to rev/s
				float right_wheel_speed_rev_per_second = right_wheel_speed_meters_per_second / 2;
 8001ae8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001aec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float left_wheel_speed_rev_per_second = left_wheel_speed_meters_per_second / 2;
 8001af8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001afc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

				//We convert rev/s to signal period
				float right_wheel_signal_period_seconds = 1 / (32 * right_wheel_speed_rev_per_second);
 8001b08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b0c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001b8c <EXTI0_IRQHandler+0x3d4>
 8001b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float left_wheel_signal_period_seconds = 1 / (32 * left_wheel_speed_rev_per_second);
 8001b20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b24:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001b8c <EXTI0_IRQHandler+0x3d4>
 8001b28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

				//We convert to signal period from s to us
				right_wheel_signal_period_us = right_wheel_signal_period_seconds * 1000000;
 8001b38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b90 <EXTI0_IRQHandler+0x3d8>
 8001b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b48:	ee17 2a90 	vmov	r2, s15
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <EXTI0_IRQHandler+0x3dc>)
 8001b4e:	601a      	str	r2, [r3, #0]
				left_wheel_signal_period_us = left_wheel_signal_period_seconds * 1000000;
 8001b50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b54:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b90 <EXTI0_IRQHandler+0x3d8>
 8001b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 2a90 	vmov	r2, s15
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <EXTI0_IRQHandler+0x3e0>)
 8001b66:	601a      	str	r2, [r3, #0]
				//generateRightWheelSignal(right_wheel_signal_period_us);
				//TODO: generate left wheel signal


				//STM_EVAL_LEDToggle(LED4);
				EXTI_ClearITPendingBit(EXTI_Line0);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff f97d 	bl	8000e68 <EXTI_ClearITPendingBit>

	}



}
 8001b6e:	bf00      	nop
 8001b70:	3748      	adds	r7, #72	; 0x48
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20000054 	.word	0x20000054
 8001b80:	20000058 	.word	0x20000058
 8001b84:	447a0000 	.word	0x447a0000
 8001b88:	45610000 	.word	0x45610000
 8001b8c:	42000000 	.word	0x42000000
 8001b90:	49742400 	.word	0x49742400
 8001b94:	20000084 	.word	0x20000084
 8001b98:	20000080 	.word	0x20000080

08001b9c <init_PB_user>:

void init_PB_user(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fa7d 	bl	80010a4 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);	//TODO: Check if yes or no
 8001baa:	2101      	movs	r1, #1
 8001bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bb0:	f7ff fab8 	bl	8001124 <RCC_APB2PeriphClockCmd>

	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Pin = GPIO_Pin_0;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_config);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481a      	ldr	r0, [pc, #104]	; (8001c30 <init_PB_user+0x94>)
 8001bc8:	f7ff f95e 	bl	8000e88 <GPIO_Init>

	//For PC15 AUX INPUT
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2004      	movs	r0, #4
 8001bd0:	f7ff fa68 	bl	80010a4 <RCC_AHB1PeriphClockCmd>
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_UP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Pin = GPIO_Pin_15;
 8001bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be0:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &GPIO_config);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	4812      	ldr	r0, [pc, #72]	; (8001c34 <init_PB_user+0x98>)
 8001bea:	f7ff f94d 	bl	8000e88 <GPIO_Init>
	////

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fab7 	bl	8001164 <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line0;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 8001bfe:	2308      	movs	r3, #8
 8001c00:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f8a0 	bl	8000d50 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI0_IRQn;
 8001c10:	2306      	movs	r3, #6
 8001c12:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x04;
 8001c14:	2304      	movs	r3, #4
 8001c16:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff36 	bl	8000a94 <NVIC_Init>
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020800 	.word	0x40020800

08001c38 <init_wheels_inputs>:

// Inits the input for each wheel
void init_wheels_inputs(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2008      	movs	r0, #8
 8001c42:	f7ff fa2f 	bl	80010a4 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001c46:	2101      	movs	r1, #1
 8001c48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c4c:	f7ff fa6a 	bl	8001124 <RCC_APB2PeriphClockCmd>

	GPIO_config.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c54:	613b      	str	r3, [r7, #16]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;	// TODO: Check if pullups yes or no
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_OType = GPIO_OType_PP;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75bb      	strb	r3, [r7, #22]
	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_Speed = GPIO_Speed_100MHz;
 8001c62:	2303      	movs	r3, #3
 8001c64:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOD, &GPIO_config);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <init_wheels_inputs+0x98>)
 8001c6e:	f7ff f90b 	bl	8000e88 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource9);
 8001c72:	2109      	movs	r1, #9
 8001c74:	2003      	movs	r0, #3
 8001c76:	f7ff fa75 	bl	8001164 <SYSCFG_EXTILineConfig>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource8);
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f7ff fa71 	bl	8001164 <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line9 ;
 8001c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c86:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f859 	bl	8000d50 <EXTI_Init>
	EXTI_config.EXTI_Line = EXTI_Line8;
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	60bb      	str	r3, [r7, #8]
	EXTI_Init(&EXTI_config);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f851 	bl	8000d50 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI9_5_IRQn;
 8001cae:	2317      	movs	r3, #23
 8001cb0:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x03;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fee7 	bl	8000a94 <NVIC_Init>

}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40020c00 	.word	0x40020c00

08001cd4 <init_TIM3>:

//Interrupt every 1us
void init_TIM3(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fa01 	bl	80010e4 <RCC_APB1PeriphClockCmd>
	//TIM_TimeBaseStructInit(&TIM_TimerConfig);	//TODO: Check if yes or no
	// Inits TIM3 and TIM4 for free-running counters that interrupts every 65535us
	/*TIM_TimerConfig.TIM_Prescaler = 94;	// Now we get 1 Tic every 1us
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimerConfig.TIM_Period = 0xFFFFFFFF;*/
	TIM_TimerConfig.TIM_Prescaler = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 90;
 8001cea:	235a      	movs	r3, #90	; 0x5a
 8001cec:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM3, &TIM_TimerConfig);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <init_TIM3+0x5c>)
 8001cf8:	f7ff fa76 	bl	80011e8 <TIM_TimeBaseInit>
    //TIM_TimeBaseInit(TIM4, &TIM_TimerConfig);

    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2101      	movs	r1, #1
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <init_TIM3+0x5c>)
 8001d02:	f7ff fafd 	bl	8001300 <TIM_ITConfig>
    //TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);

    NVIC_TimerConfig.NVIC_IRQChannel = TIM3_IRQn;
 8001d06:	231d      	movs	r3, #29
 8001d08:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x01;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 8001d12:	2301      	movs	r3, #1
 8001d14:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe febb 	bl	8000a94 <NVIC_Init>
    //NVIC_TimerConfig.NVIC_IRQChannel = TIM4_IRQn;
    //NVIC_Init(&NVIC_TimerConfig);

    TIM_Cmd(TIM3, ENABLE);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4803      	ldr	r0, [pc, #12]	; (8001d30 <init_TIM3+0x5c>)
 8001d22:	f7ff facd 	bl	80012c0 <TIM_Cmd>
    NVIC_TimerConfig.NVIC_IRQChannel = TIM4_IRQn;
    NVIC_Init(&NVIC_TimerConfig);

    TIM_Cmd(TIM9, ENABLE);
    TIM_Cmd(TIM4, ENABLE);*/
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40000400 	.word	0x40000400

08001d34 <init_TIM2>:

// Inits TIM2 for 1ms interrupts
void init_TIM2(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff f9d1 	bl	80010e4 <RCC_APB1PeriphClockCmd>

	TIM_TimerConfig.TIM_Prescaler = 17;
 8001d42:	2311      	movs	r3, #17
 8001d44:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 8001d46:	2300      	movs	r3, #0
 8001d48:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 4999;
 8001d4a:	f241 3387 	movw	r3, #4999	; 0x1387
 8001d4e:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &TIM_TimerConfig);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d5c:	f7ff fa44 	bl	80011e8 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8001d60:	2201      	movs	r2, #1
 8001d62:	2101      	movs	r1, #1
 8001d64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d68:	f7ff faca 	bl	8001300 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM2_IRQn;
 8001d6c:	231c      	movs	r3, #28
 8001d6e:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x08;
 8001d74:	2308      	movs	r3, #8
 8001d76:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fe88 	bl	8000a94 <NVIC_Init>

    TIM_Cmd(TIM2, ENABLE);
 8001d84:	2101      	movs	r1, #1
 8001d86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d8a:	f7ff fa99 	bl	80012c0 <TIM_Cmd>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <init_DAC>:

void init_DAC(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_config;
	GPIO_InitTypeDef GPIO_config;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001da4:	f7ff f99e 	bl	80010e4 <RCC_APB1PeriphClockCmd>
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_config.GPIO_Pin = GPIO_Pin_4;
 8001da8:	2310      	movs	r3, #16
 8001daa:	603b      	str	r3, [r7, #0]
	GPIO_config.GPIO_Mode = GPIO_Mode_AN;
 8001dac:	2303      	movs	r3, #3
 8001dae:	713b      	strb	r3, [r7, #4]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_config);
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <init_DAC+0x58>)
 8001dba:	f7ff f865 	bl	8000e88 <GPIO_Init>

	//DAC_DeInit();
	DAC_config.DAC_Trigger = DAC_Trigger_None;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
	DAC_config.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
	DAC_config.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
	DAC_Init(DAC_Channel_1, &DAC_config);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7fe fec1 	bl	8000b58 <DAC_Init>

	DAC_Cmd(DAC_Channel_1, ENABLE);
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7fe fef1 	bl	8000bc0 <DAC_Cmd>
	DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 8001dde:	2100      	movs	r1, #0
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7fe ff13 	bl	8000c0c <DAC_SetChannel1Data>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020000 	.word	0x40020000

08001df4 <TIM2_IRQHandler>:

// Executes the TIM2 RSI
void TIM2_IRQHandler(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != 0) {
 8001df8:	2101      	movs	r1, #1
 8001dfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dfe:	f7ff faa3 	bl	8001348 <TIM_GetITStatus>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01a      	beq.n	8001e3e <TIM2_IRQHandler+0x4a>

		counter_led++;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <TIM2_IRQHandler+0x50>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <TIM2_IRQHandler+0x50>)
 8001e10:	6013      	str	r3, [r2, #0]
		if(counter_led >= 200){
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <TIM2_IRQHandler+0x50>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2bc7      	cmp	r3, #199	; 0xc7
 8001e18:	dd05      	ble.n	8001e26 <TIM2_IRQHandler+0x32>
			counter_led = 0;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <TIM2_IRQHandler+0x50>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
			STM_EVAL_LEDToggle(LED3);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fafb 	bl	800141c <STM_EVAL_LEDToggle>
		}

		// Update the output signal
		_calculate_final_signal();
 8001e26:	f7ff fbbf 	bl	80015a8 <_calculate_final_signal>


		//ms_since_edge_rising++;
		bouncing_counter_ms++;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <TIM2_IRQHandler+0x54>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <TIM2_IRQHandler+0x54>)
 8001e32:	6013      	str	r3, [r2, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001e34:	2101      	movs	r1, #1
 8001e36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3a:	f7ff faaf 	bl	800139c <TIM_ClearITPendingBit>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000034 	.word	0x20000034
 8001e48:	20000068 	.word	0x20000068

08001e4c <TIM3_IRQHandler>:

int todoododo = 0;

// Executes the TIM3 RSI
void TIM3_IRQHandler(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != 0) {
 8001e50:	2101      	movs	r1, #1
 8001e52:	480b      	ldr	r0, [pc, #44]	; (8001e80 <TIM3_IRQHandler+0x34>)
 8001e54:	f7ff fa78 	bl	8001348 <TIM_GetITStatus>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <TIM3_IRQHandler+0x2e>
		micros_period_right+=2;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <TIM3_IRQHandler+0x38>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3302      	adds	r3, #2
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <TIM3_IRQHandler+0x38>)
 8001e66:	6013      	str	r3, [r2, #0]
		micros_period_left+=2;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <TIM3_IRQHandler+0x3c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <TIM3_IRQHandler+0x3c>)
 8001e70:	6013      	str	r3, [r2, #0]
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8001e72:	2101      	movs	r1, #1
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM3_IRQHandler+0x34>)
 8001e76:	f7ff fa91 	bl	800139c <TIM_ClearITPendingBit>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40000400 	.word	0x40000400
 8001e84:	20000040 	.word	0x20000040
 8001e88:	20000044 	.word	0x20000044

08001e8c <_calculate_rotation_speed>:

unsigned int _calculate_rotation_speed(uint32_t us_passed){
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	return 100000000/(32 * us_passed);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <_calculate_rotation_speed+0x20>)
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	05f5e100 	.word	0x05f5e100

08001eb0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line9) != 0) {
 8001eb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eb8:	f7fe ffbc 	bl	8000e34 <EXTI_GetITStatus>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00e      	beq.n	8001ee0 <EXTI9_5_IRQHandler+0x30>

    	Wd = _calculate_rotation_speed(micros_period_right);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <EXTI9_5_IRQHandler+0x60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffe0 	bl	8001e8c <_calculate_rotation_speed>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <EXTI9_5_IRQHandler+0x64>)
 8001ed0:	601a      	str	r2, [r3, #0]
    	micros_period_right = 0;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <EXTI9_5_IRQHandler+0x60>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        EXTI_ClearITPendingBit(EXTI_Line9);
 8001ed8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001edc:	f7fe ffc4 	bl	8000e68 <EXTI_ClearITPendingBit>
    }
    if (EXTI_GetITStatus(EXTI_Line8) != 0) {
 8001ee0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ee4:	f7fe ffa6 	bl	8000e34 <EXTI_GetITStatus>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00e      	beq.n	8001f0c <EXTI9_5_IRQHandler+0x5c>
    	We = _calculate_rotation_speed(micros_period_left);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <EXTI9_5_IRQHandler+0x68>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffca 	bl	8001e8c <_calculate_rotation_speed>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <EXTI9_5_IRQHandler+0x6c>)
 8001efc:	601a      	str	r2, [r3, #0]
    	micros_period_left = 0;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <EXTI9_5_IRQHandler+0x68>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

    	//GPIO_ToggleBits(GPIOE, GPIO_Pin_4);
    	//STM_EVAL_LEDToggle(LED4); //TODO: Debug
        EXTI_ClearITPendingBit(EXTI_Line8);
 8001f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f08:	f7fe ffae 	bl	8000e68 <EXTI_ClearITPendingBit>
    }
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000040 	.word	0x20000040
 8001f14:	20000038 	.word	0x20000038
 8001f18:	20000044 	.word	0x20000044
 8001f1c:	2000003c 	.word	0x2000003c

08001f20 <main>:

int main(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	init_TIM2(); // 1ms
 8001f24:	f7ff ff06 	bl	8001d34 <init_TIM2>
	init_TIM3(); // 2us
 8001f28:	f7ff fed4 	bl	8001cd4 <init_TIM3>
	init_TIM5(); // 50us
 8001f2c:	f7ff fc14 	bl	8001758 <init_TIM5>
	init_wheels_inputs();
 8001f30:	f7ff fe82 	bl	8001c38 <init_wheels_inputs>
	init_wheel_signal_ouput();
 8001f34:	f7ff fbf4 	bl	8001720 <init_wheel_signal_ouput>
	init_PB_user();
 8001f38:	f7ff fe30 	bl	8001b9c <init_PB_user>
	init_DAC();
 8001f3c:	f7ff ff2c 	bl	8001d98 <init_DAC>
	STM_EVAL_LEDInit(LED3);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fa3d 	bl	80013c0 <STM_EVAL_LEDInit>

	/* Infinite loop */
	while (1){
 8001f46:	e7fe      	b.n	8001f46 <main+0x26>

08001f48 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1){
 8001f4c:	e7fe      	b.n	8001f4c <sEE_TIMEOUT_UserCallback+0x4>
	...

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f88 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f56:	e003      	b.n	8001f60 <LoopCopyDataInit>

08001f58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f5e:	3104      	adds	r1, #4

08001f60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f68:	d3f6      	bcc.n	8001f58 <CopyDataInit>
  ldr  r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f6c:	e002      	b.n	8001f74 <LoopFillZerobss>

08001f6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f70:	f842 3b04 	str.w	r3, [r2], #4

08001f74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f78:	d3f9      	bcc.n	8001f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f7a:	f000 f841 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f000 f8f1 	bl	8002164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff ffcd 	bl	8001f20 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f88:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f8c:	08002204 	.word	0x08002204
  ldr  r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f94:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001f98:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001f9c:	20000088 	.word	0x20000088

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>

08001fa2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <UsageFault_Handler+0x4>

08001fc8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4a16      	ldr	r2, [pc, #88]	; (8002060 <SystemInit+0x60>)
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <SystemInit+0x60>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <SystemInit+0x64>)
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <SystemInit+0x64>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <SystemInit+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <SystemInit+0x64>)
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <SystemInit+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <SystemInit+0x64>)
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <SystemInit+0x68>)
 800203a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <SystemInit+0x64>)
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <SystemInit+0x64>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800204e:	f000 f80d 	bl	800206c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <SystemInit+0x60>)
 8002054:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002058:	609a      	str	r2, [r3, #8]
#endif
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	40023800 	.word	0x40023800
 8002068:	24003010 	.word	0x24003010

0800206c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800207a:	4a36      	ldr	r2, [pc, #216]	; (8002154 <SetSysClock+0xe8>)
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <SetSysClock+0xe8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <SetSysClock+0xe8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <SetSysClock+0x38>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020a2:	d1f0      	bne.n	8002086 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <SetSysClock+0xe8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80020b0:	2301      	movs	r3, #1
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	e001      	b.n	80020ba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <SetSysClock+0xe8>)
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <SetSysClock+0xec>)
 80020c4:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <SetSysClock+0xe8>)
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <SetSysClock+0xe8>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <SetSysClock+0xf0>)
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <SetSysClock+0xf0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020dc:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <SetSysClock+0xe8>)
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <SetSysClock+0xe8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <SetSysClock+0xe8>)
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <SetSysClock+0xe8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f0:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <SetSysClock+0xe8>)
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <SetSysClock+0xe8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80020fc:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <SetSysClock+0xe8>)
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <SetSysClock+0xe8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002108:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800210a:	bf00      	nop
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <SetSysClock+0xe8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f9      	beq.n	800210c <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <SetSysClock+0xf4>)
 800211a:	f240 7205 	movw	r2, #1797	; 0x705
 800211e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <SetSysClock+0xe8>)
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <SetSysClock+0xe8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800212c:	4a09      	ldr	r2, [pc, #36]	; (8002154 <SetSysClock+0xe8>)
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <SetSysClock+0xe8>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002138:	bf00      	nop
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SetSysClock+0xe8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d1f9      	bne.n	800213a <SetSysClock+0xce>
    {
    }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	07405a08 	.word	0x07405a08
 800215c:	40007000 	.word	0x40007000
 8002160:	40023c00 	.word	0x40023c00

08002164 <__libc_init_array>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	4e0d      	ldr	r6, [pc, #52]	; (800219c <__libc_init_array+0x38>)
 8002168:	4c0d      	ldr	r4, [pc, #52]	; (80021a0 <__libc_init_array+0x3c>)
 800216a:	1ba4      	subs	r4, r4, r6
 800216c:	10a4      	asrs	r4, r4, #2
 800216e:	2500      	movs	r5, #0
 8002170:	42a5      	cmp	r5, r4
 8002172:	d109      	bne.n	8002188 <__libc_init_array+0x24>
 8002174:	4e0b      	ldr	r6, [pc, #44]	; (80021a4 <__libc_init_array+0x40>)
 8002176:	4c0c      	ldr	r4, [pc, #48]	; (80021a8 <__libc_init_array+0x44>)
 8002178:	f000 f818 	bl	80021ac <_init>
 800217c:	1ba4      	subs	r4, r4, r6
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	2500      	movs	r5, #0
 8002182:	42a5      	cmp	r5, r4
 8002184:	d105      	bne.n	8002192 <__libc_init_array+0x2e>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218c:	4798      	blx	r3
 800218e:	3501      	adds	r5, #1
 8002190:	e7ee      	b.n	8002170 <__libc_init_array+0xc>
 8002192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002196:	4798      	blx	r3
 8002198:	3501      	adds	r5, #1
 800219a:	e7f2      	b.n	8002182 <__libc_init_array+0x1e>
 800219c:	080021fc 	.word	0x080021fc
 80021a0:	080021fc 	.word	0x080021fc
 80021a4:	080021fc 	.word	0x080021fc
 80021a8:	08002200 	.word	0x08002200

080021ac <_init>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr

080021b8 <_fini>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	bf00      	nop
 80021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021be:	bc08      	pop	{r3}
 80021c0:	469e      	mov	lr, r3
 80021c2:	4770      	bx	lr
