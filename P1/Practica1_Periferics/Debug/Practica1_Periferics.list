
Practica1_Periferics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018c0  080018c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080018c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000068  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000007c  2000007c  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007ab5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015d0  00000000  00000000  00027af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa8  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  00029b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003953  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000357a  00000000  00000000  0002de8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031405  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d6c  00000000  00000000  00031484  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000341f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800186c 	.word	0x0800186c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	0800186c 	.word	0x0800186c

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <DAC_Init+0x64>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80002c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	fa02 f303 	lsl.w	r3, r2, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	4013      	ands	r3, r2
 80002d8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002e8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002ee:	4313      	orrs	r3, r2
 80002f0:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <DAC_Init+0x64>)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6013      	str	r3, [r2, #0]
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40007400 	.word	0x40007400

08000318 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d009      	beq.n	800033e <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <DAC_Cmd+0x48>)
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <DAC_Cmd+0x48>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	2001      	movs	r0, #1
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	fa00 f303 	lsl.w	r3, r0, r3
 8000338:	4313      	orrs	r3, r2
 800033a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800033c:	e009      	b.n	8000352 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <DAC_Cmd+0x48>)
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <DAC_Cmd+0x48>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	2001      	movs	r0, #1
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	fa00 f303 	lsl.w	r3, r0, r3
 800034c:	43db      	mvns	r3, r3
 800034e:	4013      	ands	r3, r2
 8000350:	600b      	str	r3, [r1, #0]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40007400 	.word	0x40007400

08000364 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <DAC_SetChannel1Data+0x34>)
 8000376:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	3308      	adds	r3, #8
 8000380:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	461a      	mov	r2, r3
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	6013      	str	r3, [r2, #0]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40007400 	.word	0x40007400

0800039c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0201 	orr.w	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80003ba:	e005      	b.n	80003c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003de:	2300      	movs	r3, #0
 80003e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a15      	ldr	r2, [pc, #84]	; (8000440 <DMA_GetFlagStatus+0x6c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d802      	bhi.n	80003f4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <DMA_GetFlagStatus+0x70>)
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	e001      	b.n	80003f8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <DMA_GetFlagStatus+0x74>)
 80003f6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	e002      	b.n	8000410 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000416:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800041a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	4013      	ands	r3, r2
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000426:	2301      	movs	r3, #1
 8000428:	75fb      	strb	r3, [r7, #23]
 800042a:	e001      	b.n	8000430 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000430:	7dfb      	ldrb	r3, [r7, #23]
}
 8000432:	4618      	mov	r0, r3
 8000434:	371c      	adds	r7, #28
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	4002640f 	.word	0x4002640f
 8000444:	40026000 	.word	0x40026000
 8000448:	40026400 	.word	0x40026400

0800044c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a10      	ldr	r2, [pc, #64]	; (800049c <DMA_ClearFlag+0x50>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d802      	bhi.n	8000464 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <DMA_ClearFlag+0x54>)
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	e001      	b.n	8000468 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <DMA_ClearFlag+0x58>)
 8000466:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d007      	beq.n	8000482 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000478:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000480:	e006      	b.n	8000490 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000488:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	6093      	str	r3, [r2, #8]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	4002640f 	.word	0x4002640f
 80004a0:	40026000 	.word	0x40026000
 80004a4:	40026400 	.word	0x40026400

080004a8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004b4:	4b34      	ldr	r3, [pc, #208]	; (8000588 <EXTI_Init+0xe0>)
 80004b6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	799b      	ldrb	r3, [r3, #6]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d04f      	beq.n	8000560 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004c0:	4931      	ldr	r1, [pc, #196]	; (8000588 <EXTI_Init+0xe0>)
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <EXTI_Init+0xe0>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	43db      	mvns	r3, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80004d0:	492d      	ldr	r1, [pc, #180]	; (8000588 <EXTI_Init+0xe0>)
 80004d2:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <EXTI_Init+0xe0>)
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	43db      	mvns	r3, r3
 80004dc:	4013      	ands	r3, r2
 80004de:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	461a      	mov	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4413      	add	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	6811      	ldr	r1, [r2, #0]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80004fa:	4923      	ldr	r1, [pc, #140]	; (8000588 <EXTI_Init+0xe0>)
 80004fc:	4b22      	ldr	r3, [pc, #136]	; (8000588 <EXTI_Init+0xe0>)
 80004fe:	689a      	ldr	r2, [r3, #8]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	43db      	mvns	r3, r3
 8000506:	4013      	ands	r3, r2
 8000508:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800050a:	491f      	ldr	r1, [pc, #124]	; (8000588 <EXTI_Init+0xe0>)
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <EXTI_Init+0xe0>)
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	43db      	mvns	r3, r3
 8000516:	4013      	ands	r3, r2
 8000518:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b10      	cmp	r3, #16
 8000520:	d10e      	bne.n	8000540 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000522:	4919      	ldr	r1, [pc, #100]	; (8000588 <EXTI_Init+0xe0>)
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <EXTI_Init+0xe0>)
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4313      	orrs	r3, r2
 800052e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000530:	4915      	ldr	r1, [pc, #84]	; (8000588 <EXTI_Init+0xe0>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <EXTI_Init+0xe0>)
 8000534:	68da      	ldr	r2, [r3, #12]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4313      	orrs	r3, r2
 800053c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800053e:	e01d      	b.n	800057c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <EXTI_Init+0xe0>)
 8000542:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	6811      	ldr	r1, [r2, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	430a      	orrs	r2, r1
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	e00d      	b.n	800057c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	461a      	mov	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4413      	add	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	6811      	ldr	r1, [r2, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	43d2      	mvns	r2, r2
 8000578:	400a      	ands	r2, r1
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40013c00 	.word	0x40013c00

0800058c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <EXTI_GetITStatus+0x30>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e001      	b.n	80005ae <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40013c00 	.word	0x40013c00

080005c0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <EXTI_ClearITPendingBit+0x1c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6153      	str	r3, [r2, #20]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40013c00 	.word	0x40013c00

080005e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e076      	b.n	80006ea <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005fc:	2201      	movs	r2, #1
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d165      	bne.n	80006e4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2103      	movs	r1, #3
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	401a      	ands	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	4619      	mov	r1, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	431a      	orrs	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d003      	beq.n	8000656 <GPIO_Init+0x76>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d12e      	bne.n	80006b4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	2103      	movs	r1, #3
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	4619      	mov	r1, r3
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	2301      	movs	r3, #1
 8000690:	408b      	lsls	r3, r1
 8000692:	43db      	mvns	r3, r3
 8000694:	401a      	ands	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	7992      	ldrb	r2, [r2, #6]
 80006a2:	4611      	mov	r1, r2
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	b292      	uxth	r2, r2
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	b292      	uxth	r2, r2
 80006ae:	431a      	orrs	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	2103      	movs	r1, #3
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	401a      	ands	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68da      	ldr	r2, [r3, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	79db      	ldrb	r3, [r3, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d985      	bls.n	80005fc <GPIO_Init+0x1c>
    }
  }
}
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e001      	b.n	8000722 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	405a      	eors	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	615a      	str	r2, [r3, #20]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d008      	beq.n	8000778 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	b29b      	uxth	r3, r3
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000776:	e007      	b.n	8000788 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000782:	b29a      	uxth	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	801a      	strh	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	0f1b      	lsrs	r3, r3, #28
 80007b2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007ba:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3314      	adds	r3, #20
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e005      	b.n	80007d6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3318      	adds	r3, #24
 80007d4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	4013      	ands	r3, r2
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80007e2:	2301      	movs	r3, #1
 80007e4:	75fb      	strb	r3, [r7, #23]
 80007e6:	e001      	b.n	80007ec <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	371c      	adds	r7, #28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800080e:	490a      	ldr	r1, [pc, #40]	; (8000838 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800081a:	e006      	b.n	800082a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <RCC_AHB1PeriphClockCmd+0x3c>)
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	43db      	mvns	r3, r3
 8000826:	4013      	ands	r3, r2
 8000828:	630b      	str	r3, [r1, #48]	; 0x30
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d006      	beq.n	800085c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800084e:	490a      	ldr	r1, [pc, #40]	; (8000878 <RCC_APB1PeriphClockCmd+0x3c>)
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <RCC_APB1PeriphClockCmd+0x3c>)
 8000852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800085a:	e006      	b.n	800086a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800085c:	4906      	ldr	r1, [pc, #24]	; (8000878 <RCC_APB1PeriphClockCmd+0x3c>)
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <RCC_APB1PeriphClockCmd+0x3c>)
 8000860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	43db      	mvns	r3, r3
 8000866:	4013      	ands	r3, r2
 8000868:	640b      	str	r3, [r1, #64]	; 0x40
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800088e:	490a      	ldr	r1, [pc, #40]	; (80008b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800089a:	e006      	b.n	80008aa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <RCC_APB2PeriphClockCmd+0x3c>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <RCC_APB2PeriphClockCmd+0x3c>)
 80008a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	43db      	mvns	r3, r3
 80008a6:	4013      	ands	r3, r2
 80008a8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80008bc:	b490      	push	{r4, r7}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	220f      	movs	r2, #15
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80008e0:	4916      	ldr	r1, [pc, #88]	; (800093c <SYSCFG_EXTILineConfig+0x80>)
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <SYSCFG_EXTILineConfig+0x80>)
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3302      	adds	r3, #2
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	43db      	mvns	r3, r3
 80008fc:	401a      	ands	r2, r3
 80008fe:	1c83      	adds	r3, r0, #2
 8000900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <SYSCFG_EXTILineConfig+0x80>)
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461c      	mov	r4, r3
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <SYSCFG_EXTILineConfig+0x80>)
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3302      	adds	r3, #2
 8000918:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800091c:	79f9      	ldrb	r1, [r7, #7]
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	431a      	orrs	r2, r3
 800092c:	1ca3      	adds	r3, r4, #2
 800092e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bc90      	pop	{r4, r7}
 800093a:	4770      	bx	lr
 800093c:	40013800 	.word	0x40013800

08000940 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <TIM_TimeBaseInit+0xbc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d013      	beq.n	8000984 <TIM_TimeBaseInit+0x44>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <TIM_TimeBaseInit+0xc0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d00f      	beq.n	8000984 <TIM_TimeBaseInit+0x44>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096a:	d00b      	beq.n	8000984 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <TIM_TimeBaseInit+0xc4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d007      	beq.n	8000984 <TIM_TimeBaseInit+0x44>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <TIM_TimeBaseInit+0xc8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d003      	beq.n	8000984 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <TIM_TimeBaseInit+0xcc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d108      	bne.n	8000996 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800098a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	885a      	ldrh	r2, [r3, #2]
 8000990:	89fb      	ldrh	r3, [r7, #14]
 8000992:	4313      	orrs	r3, r2
 8000994:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <TIM_TimeBaseInit+0xd0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d00c      	beq.n	80009b8 <TIM_TimeBaseInit+0x78>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <TIM_TimeBaseInit+0xd4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d008      	beq.n	80009b8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80009a6:	89fb      	ldrh	r3, [r7, #14]
 80009a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ac:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	891a      	ldrh	r2, [r3, #8]
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	89fa      	ldrh	r2, [r7, #14]
 80009bc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	881a      	ldrh	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <TIM_TimeBaseInit+0xbc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d003      	beq.n	80009de <TIM_TimeBaseInit+0x9e>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <TIM_TimeBaseInit+0xc0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d104      	bne.n	80009e8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	7a9b      	ldrb	r3, [r3, #10]
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	829a      	strh	r2, [r3, #20]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40010000 	.word	0x40010000
 8000a00:	40010400 	.word	0x40010400
 8000a04:	40000400 	.word	0x40000400
 8000a08:	40000800 	.word	0x40000800
 8000a0c:	40000c00 	.word	0x40000c00
 8000a10:	40001000 	.word	0x40001000
 8000a14:	40001400 	.word	0x40001400

08000a18 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295
 8000a26:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	729a      	strb	r2, [r3, #10]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000aa2:	e007      	b.n	8000ab4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	801a      	strh	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	899b      	ldrh	r3, [r3, #12]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000ae6:	e009      	b.n	8000afc <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	899b      	ldrh	r3, [r3, #12]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4013      	ands	r3, r2
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	819a      	strh	r2, [r3, #12]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	81bb      	strh	r3, [r7, #12]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8a1b      	ldrh	r3, [r3, #16]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	899b      	ldrh	r3, [r3, #12]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	4013      	ands	r3, r2
 8000b36:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <TIM_GetITStatus+0x42>
 8000b3e:	897b      	ldrh	r3, [r7, #10]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	821a      	strh	r2, [r3, #16]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <STM_EVAL_LEDInit+0x50>)
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe31 	bl	80007fc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <STM_EVAL_LEDInit+0x54>)
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <STM_EVAL_LEDInit+0x58>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	f107 0208 	add.w	r2, r7, #8
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd0c 	bl	80005e0 <GPIO_Init>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	080018b4 	.word	0x080018b4
 8000bd4:	080018b0 	.word	0x080018b0
 8000bd8:	20000000 	.word	0x20000000

08000bdc <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <STM_EVAL_LEDOff+0x28>)
 8000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	4905      	ldr	r1, [pc, #20]	; (8000c08 <STM_EVAL_LEDOff+0x2c>)
 8000bf2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000bf6:	835a      	strh	r2, [r3, #26]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000000 	.word	0x20000000
 8000c08:	080018b0 	.word	0x080018b0

08000c0c <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <STM_EVAL_LEDToggle+0x34>)
 8000c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <STM_EVAL_LEDToggle+0x34>)
 8000c22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c26:	6952      	ldr	r2, [r2, #20]
 8000c28:	79f9      	ldrb	r1, [r7, #7]
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <STM_EVAL_LEDToggle+0x38>)
 8000c2c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000c30:	404a      	eors	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000000 	.word	0x20000000
 8000c44:	080018b0 	.word	0x080018b0

08000c48 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 8000c4c:	4916      	ldr	r1, [pc, #88]	; (8000ca8 <DMA1_Stream4_IRQHandler+0x60>)
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <DMA1_Stream4_IRQHandler+0x64>)
 8000c50:	f7ff fbc0 	bl	80003d4 <DMA_GetFlagStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d024      	beq.n	8000ca4 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <DMA1_Stream4_IRQHandler+0x64>)
 8000c5e:	f7ff fb9d 	bl	800039c <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8000c62:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <DMA1_Stream4_IRQHandler+0x60>)
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <DMA1_Stream4_IRQHandler+0x64>)
 8000c66:	f7ff fbf1 	bl	800044c <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <DMA1_Stream4_IRQHandler+0x68>)
 8000c6c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000c70:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000c72:	e008      	b.n	8000c86 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <DMA1_Stream4_IRQHandler+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <DMA1_Stream4_IRQHandler+0x68>)
 8000c7c:	600a      	str	r2, [r1, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <DMA1_Stream4_IRQHandler+0x3e>
 8000c82:	f000 fcc2 	bl	800160a <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <DMA1_Stream4_IRQHandler+0x6c>)
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <DMA1_Stream4_IRQHandler+0x70>)
 8000c8a:	f7ff fd83 	bl	8000794 <I2C_GetFlagStatus>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0ef      	beq.n	8000c74 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8000c94:	2101      	movs	r1, #1
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <DMA1_Stream4_IRQHandler+0x70>)
 8000c98:	f7ff fd5c 	bl	8000754 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <DMA1_Stream4_IRQHandler+0x74>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	40026070 	.word	0x40026070
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	10000004 	.word	0x10000004
 8000cb8:	40005c00 	.word	0x40005c00
 8000cbc:	20000068 	.word	0x20000068

08000cc0 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8000cc4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <DMA1_Stream2_IRQHandler+0x3c>)
 8000cca:	f7ff fb83 	bl	80003d4 <DMA_GetFlagStatus>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d010      	beq.n	8000cf6 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <DMA1_Stream2_IRQHandler+0x40>)
 8000cd8:	f7ff fd3c 	bl	8000754 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <DMA1_Stream2_IRQHandler+0x3c>)
 8000ce0:	f7ff fb5c 	bl	800039c <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8000ce4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <DMA1_Stream2_IRQHandler+0x3c>)
 8000cea:	f7ff fbaf 	bl	800044c <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <DMA1_Stream2_IRQHandler+0x44>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40026040 	.word	0x40026040
 8000d00:	40005c00 	.word	0x40005c00
 8000d04:	20000070 	.word	0x20000070

08000d08 <TIM5_IRQHandler>:

int right_wheel_signal_period_us;
int left_wheel_signal_period_us;

// Executes the TIM5 RSI
void TIM5_IRQHandler(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != 0) {
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <TIM5_IRQHandler+0x78>)
 8000d10:	f7ff fefa 	bl	8000b08 <TIM_GetITStatus>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d02f      	beq.n	8000d7a <TIM5_IRQHandler+0x72>

		signal1_microseconds++;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <TIM5_IRQHandler+0x7c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <TIM5_IRQHandler+0x7c>)
 8000d22:	6013      	str	r3, [r2, #0]
		signal2_microseconds++;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <TIM5_IRQHandler+0x80>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <TIM5_IRQHandler+0x80>)
 8000d2c:	6013      	str	r3, [r2, #0]

		if (signal1_microseconds == (right_wheel_signal_period_us / 2)) {
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <TIM5_IRQHandler+0x84>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0fda      	lsrs	r2, r3, #31
 8000d34:	4413      	add	r3, r2
 8000d36:	105b      	asrs	r3, r3, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <TIM5_IRQHandler+0x7c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d106      	bne.n	8000d50 <TIM5_IRQHandler+0x48>
			GPIO_ToggleBits(GPIOG, GPIO_Pin_0);
 8000d42:	2101      	movs	r1, #1
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <TIM5_IRQHandler+0x88>)
 8000d46:	f7ff fcf3 	bl	8000730 <GPIO_ToggleBits>
			signal1_microseconds = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <TIM5_IRQHandler+0x7c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
		}

		if (signal2_microseconds == (left_wheel_signal_period_us / 2)) {
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <TIM5_IRQHandler+0x8c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0fda      	lsrs	r2, r3, #31
 8000d56:	4413      	add	r3, r2
 8000d58:	105b      	asrs	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <TIM5_IRQHandler+0x80>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d106      	bne.n	8000d72 <TIM5_IRQHandler+0x6a>
			GPIO_ToggleBits(GPIOG, GPIO_Pin_1);
 8000d64:	2102      	movs	r1, #2
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <TIM5_IRQHandler+0x88>)
 8000d68:	f7ff fce2 	bl	8000730 <GPIO_ToggleBits>
			signal2_microseconds = 0;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <TIM5_IRQHandler+0x80>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
		}

		//TIM_SetCounter(TIM5, 0);

		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8000d72:	2101      	movs	r1, #1
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM5_IRQHandler+0x78>)
 8000d76:	f7ff fef1 	bl	8000b5c <TIM_ClearITPendingBit>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000c00 	.word	0x40000c00
 8000d84:	20000060 	.word	0x20000060
 8000d88:	20000064 	.word	0x20000064
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	40021800 	.word	0x40021800
 8000d94:	20000074 	.word	0x20000074

08000d98 <init_wheel_signal_ouput>:

void init_wheel_signal_ouput(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2040      	movs	r0, #64	; 0x40
 8000da2:	f7ff fd2b 	bl	80007fc <RCC_AHB1PeriphClockCmd>

	GPIO_config.GPIO_Mode = GPIO_Mode_OUT;
 8000da6:	2301      	movs	r3, #1
 8000da8:	713b      	strb	r3, [r7, #4]
	GPIO_config.GPIO_OType = GPIO_OType_PP;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71bb      	strb	r3, [r7, #6]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
	GPIO_config.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000db2:	2303      	movs	r3, #3
 8000db4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOG, &GPIO_config);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <init_wheel_signal_ouput+0x30>)
 8000dbc:	f7ff fc10 	bl	80005e0 <GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021800 	.word	0x40021800

08000dcc <init_TIM5>:

// Inits TIM5 for 1us interrupts
void init_TIM5(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	//TODOTODOTODO: Find values that make the timer error zero (now is near zero, but not zero)

	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2008      	movs	r0, #8
 8000dd6:	f7ff fd31 	bl	800083c <RCC_APB1PeriphClockCmd>

	TIM_TimerConfig.TIM_Prescaler = 5;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 8000dde:	2300      	movs	r3, #0
 8000de0:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 14;
 8000de2:	230e      	movs	r3, #14
 8000de4:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM5, &TIM_TimerConfig);
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	480e      	ldr	r0, [pc, #56]	; (8000e28 <init_TIM5+0x5c>)
 8000df0:	f7ff fda6 	bl	8000940 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2101      	movs	r1, #1
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <init_TIM5+0x5c>)
 8000dfa:	f7ff fe61 	bl	8000ac0 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM5_IRQn;
 8000dfe:	2332      	movs	r3, #50	; 0x32
 8000e00:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x08;
 8000e06:	2308      	movs	r3, #8
 8000e08:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9eb 	bl	80001ec <NVIC_Init>

    TIM_Cmd(TIM5, ENABLE);
 8000e16:	2101      	movs	r1, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <init_TIM5+0x5c>)
 8000e1a:	f7ff fe31 	bl	8000a80 <TIM_Cmd>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000c00 	.word	0x40000c00

08000e2c <EXTI0_IRQHandler>:


//User PB RSI
void EXTI0_IRQHandler(void) {
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b092      	sub	sp, #72	; 0x48
 8000e30:	af00      	add	r7, sp, #0
	//float left;
	//float right;
	int vehicle_speeds[6] = {0,10,35,45,100,270};
 8000e32:	4b93      	ldr	r3, [pc, #588]	; (8001080 <EXTI0_IRQHandler+0x254>)
 8000e34:	f107 0418 	add.w	r4, r7, #24
 8000e38:	461d      	mov	r5, r3
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e42:	e884 0003 	stmia.w	r4, {r0, r1}

	float wheel_speed_difference_factor[5] = {1, 1.25, 1.35, 1.8, 2.2};
 8000e46:	4b8f      	ldr	r3, [pc, #572]	; (8001084 <EXTI0_IRQHandler+0x258>)
 8000e48:	1d3c      	adds	r4, r7, #4
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	6023      	str	r3, [r4, #0]

	if(EXTI_GetITStatus(EXTI_Line0) != 0) {
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fb99 	bl	800058c <EXTI_GetITStatus>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8198 	beq.w	8001192 <EXTI0_IRQHandler+0x366>

		if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_15) == 0) {
 8000e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e66:	4888      	ldr	r0, [pc, #544]	; (8001088 <EXTI0_IRQHandler+0x25c>)
 8000e68:	f7ff fc48 	bl	80006fc <GPIO_ReadInputDataBit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13f      	bne.n	8000ef2 <EXTI0_IRQHandler+0xc6>

			//CASE GPIO AUX C15 LOW
			if (vehicle_speeds[i] == 0) {
 8000e72:	4b86      	ldr	r3, [pc, #536]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <EXTI0_IRQHandler+0x62>
				vehicle_speed_ascendent = 1;
 8000e86:	4b82      	ldr	r3, [pc, #520]	; (8001090 <EXTI0_IRQHandler+0x264>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e00d      	b.n	8000eaa <EXTI0_IRQHandler+0x7e>
			} else if (vehicle_speeds[i] == 270) {
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e98:	4413      	add	r3, r2
 8000e9a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000e9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000ea2:	d102      	bne.n	8000eaa <EXTI0_IRQHandler+0x7e>
				vehicle_speed_ascendent = 0;
 8000ea4:	4b7a      	ldr	r3, [pc, #488]	; (8001090 <EXTI0_IRQHandler+0x264>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
			}

			if (vehicle_speed_ascendent == 1) {
 8000eaa:	4b79      	ldr	r3, [pc, #484]	; (8001090 <EXTI0_IRQHandler+0x264>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10f      	bne.n	8000ed2 <EXTI0_IRQHandler+0xa6>
				vehicle_speed = vehicle_speeds[i];
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ec2:	4a74      	ldr	r2, [pc, #464]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8000ec4:	6013      	str	r3, [r2, #0]
				i++;
 8000ec6:	4b71      	ldr	r3, [pc, #452]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a6f      	ldr	r2, [pc, #444]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e102      	b.n	80010d8 <EXTI0_IRQHandler+0x2ac>
			} else {
				vehicle_speed = vehicle_speeds[i];
 8000ed2:	4b6e      	ldr	r3, [pc, #440]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000edc:	4413      	add	r3, r2
 8000ede:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ee2:	4a6c      	ldr	r2, [pc, #432]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8000ee4:	6013      	str	r3, [r2, #0]
				i--;
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a67      	ldr	r2, [pc, #412]	; (800108c <EXTI0_IRQHandler+0x260>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e0f2      	b.n	80010d8 <EXTI0_IRQHandler+0x2ac>
			}
			/////////////////////////

		} else {

			STM_EVAL_LEDOff(LED4);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fe72 	bl	8000bdc <STM_EVAL_LEDOff>
			//CASE GPIO AUX C15 HIGH
			if (vehicle_speed != 0) {
 8000ef8:	4b66      	ldr	r3, [pc, #408]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80d9 	beq.w	80010b4 <EXTI0_IRQHandler+0x288>

				if (wheel_speed_difference_factor[j] == 1) {
 8000f02:	4b65      	ldr	r3, [pc, #404]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b44      	subs	r3, #68	; 0x44
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f18:	eef4 7a47 	vcmp.f32	s15, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d119      	bne.n	8000f56 <EXTI0_IRQHandler+0x12a>
					difference_factor_ascendent = 1;
 8000f22:	4b5e      	ldr	r3, [pc, #376]	; (800109c <EXTI0_IRQHandler+0x270>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
					num_cycles++;
 8000f28:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <EXTI0_IRQHandler+0x274>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <EXTI0_IRQHandler+0x274>)
 8000f30:	6013      	str	r3, [r2, #0]

					if (num_cycles == 2) {
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <EXTI0_IRQHandler+0x274>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d120      	bne.n	8000f7c <EXTI0_IRQHandler+0x150>
						num_cycles = 1;
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <EXTI0_IRQHandler+0x274>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
						calculating_right_speed = !calculating_right_speed;
 8000f40:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <EXTI0_IRQHandler+0x278>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <EXTI0_IRQHandler+0x278>)
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e012      	b.n	8000f7c <EXTI0_IRQHandler+0x150>
					}
				} else if (wheel_speed_difference_factor[j] == (float) 2.2) {
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f60:	4413      	add	r3, r2
 8000f62:	3b44      	subs	r3, #68	; 0x44
 8000f64:	edd3 7a00 	vldr	s15, [r3]
 8000f68:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80010a8 <EXTI0_IRQHandler+0x27c>
 8000f6c:	eef4 7a47 	vcmp.f32	s15, s14
 8000f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f74:	d102      	bne.n	8000f7c <EXTI0_IRQHandler+0x150>
					difference_factor_ascendent = 0;
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <EXTI0_IRQHandler+0x270>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
				}

				if (difference_factor_ascendent == 1) {
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <EXTI0_IRQHandler+0x270>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d13e      	bne.n	8001002 <EXTI0_IRQHandler+0x1d6>

					if (calculating_right_speed) {
 8000f84:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <EXTI0_IRQHandler+0x278>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01a      	beq.n	8000fc2 <EXTI0_IRQHandler+0x196>
						left_wheel_speed = vehicle_speed;
 8000f8c:	4b41      	ldr	r3, [pc, #260]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	4b44      	ldr	r3, [pc, #272]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
						right_wheel_speed = wheel_speed_difference_factor[j] * left_wheel_speed;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fa8:	4413      	add	r3, r2
 8000faa:	3b44      	subs	r3, #68	; 0x44
 8000fac:	ed93 7a00 	vldr	s14, [r3]
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
 8000fc0:	e019      	b.n	8000ff6 <EXTI0_IRQHandler+0x1ca>
					} else {
						right_wheel_speed = vehicle_speed;
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
						left_wheel_speed = wheel_speed_difference_factor[j] * right_wheel_speed;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b44      	subs	r3, #68	; 0x44
 8000fe2:	ed93 7a00 	vldr	s14, [r3]
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
					}
					//left = left_wheel_speed;
					//right = right_wheel_speed;
					j++;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e06a      	b.n	80010d8 <EXTI0_IRQHandler+0x2ac>

				} else {

					if (calculating_right_speed) {
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <EXTI0_IRQHandler+0x278>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01a      	beq.n	8001040 <EXTI0_IRQHandler+0x214>
						left_wheel_speed = vehicle_speed;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <EXTI0_IRQHandler+0x268>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8001018:	edc3 7a00 	vstr	s15, [r3]
						right_wheel_speed = wheel_speed_difference_factor[j] * left_wheel_speed;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001026:	4413      	add	r3, r2
 8001028:	3b44      	subs	r3, #68	; 0x44
 800102a:	ed93 7a00 	vldr	s14, [r3]
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
 800103e:	e019      	b.n	8001074 <EXTI0_IRQHandler+0x248>
					} else {
						right_wheel_speed = vehicle_speed;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <EXTI0_IRQHandler+0x268>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
						left_wheel_speed = wheel_speed_difference_factor[j] * right_wheel_speed;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800105c:	4413      	add	r3, r2
 800105e:	3b44      	subs	r3, #68	; 0x44
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <EXTI0_IRQHandler+0x284>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <EXTI0_IRQHandler+0x280>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
					}

					//left = left_wheel_speed;
					//right = right_wheel_speed;
					j--;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <EXTI0_IRQHandler+0x26c>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e02b      	b.n	80010d8 <EXTI0_IRQHandler+0x2ac>
 8001080:	08001884 	.word	0x08001884
 8001084:	0800189c 	.word	0x0800189c
 8001088:	40020800 	.word	0x40020800
 800108c:	20000048 	.word	0x20000048
 8001090:	2000000c 	.word	0x2000000c
 8001094:	20000044 	.word	0x20000044
 8001098:	2000005c 	.word	0x2000005c
 800109c:	20000010 	.word	0x20000010
 80010a0:	2000004c 	.word	0x2000004c
 80010a4:	20000050 	.word	0x20000050
 80010a8:	400ccccd 	.word	0x400ccccd
 80010ac:	20000058 	.word	0x20000058
 80010b0:	20000054 	.word	0x20000054

			} else {
				//left = vehicle_speed;
				//right = vehicle_speed;

				right_wheel_speed = vehicle_speed;
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <EXTI0_IRQHandler+0x370>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <EXTI0_IRQHandler+0x374>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]
				left_wheel_speed = vehicle_speed;
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <EXTI0_IRQHandler+0x370>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <EXTI0_IRQHandler+0x378>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]

			//////////////////
		}

		//We convert km/h to m/s
		float right_wheel_speed_meters_per_second = (right_wheel_speed * 1000) / 3600;
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <EXTI0_IRQHandler+0x374>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80011a8 <EXTI0_IRQHandler+0x37c>
 80010e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010e6:	eddf 6a31 	vldr	s13, [pc, #196]	; 80011ac <EXTI0_IRQHandler+0x380>
 80010ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float left_wheel_speed_meters_per_second = (left_wheel_speed * 1000) / 3600;
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <EXTI0_IRQHandler+0x378>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80011a8 <EXTI0_IRQHandler+0x37c>
 80010fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001100:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80011ac <EXTI0_IRQHandler+0x380>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		//We convert from m/s to rev/s
		float right_wheel_speed_rev_per_second = right_wheel_speed_meters_per_second / 2;
 800110c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001110:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001118:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float left_wheel_speed_rev_per_second = left_wheel_speed_meters_per_second / 2;
 800111c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001120:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001128:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		//We convert rev/s to signal period
		float right_wheel_signal_period_seconds = 1 / (32 * right_wheel_speed_rev_per_second);
 800112c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001130:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80011b0 <EXTI0_IRQHandler+0x384>
 8001134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800113c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001140:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float left_wheel_signal_period_seconds = 1 / (32 * left_wheel_speed_rev_per_second);
 8001144:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001148:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011b0 <EXTI0_IRQHandler+0x384>
 800114c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		//We convert to signal period from s to us
		right_wheel_signal_period_us = right_wheel_signal_period_seconds * 1000000;
 800115c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001160:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011b4 <EXTI0_IRQHandler+0x388>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	ee17 2a90 	vmov	r2, s15
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <EXTI0_IRQHandler+0x38c>)
 8001172:	601a      	str	r2, [r3, #0]
		left_wheel_signal_period_us = left_wheel_signal_period_seconds * 1000000;
 8001174:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001178:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011b4 <EXTI0_IRQHandler+0x388>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001184:	ee17 2a90 	vmov	r2, s15
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <EXTI0_IRQHandler+0x390>)
 800118a:	601a      	str	r2, [r3, #0]
		//generateRightWheelSignal(right_wheel_signal_period_us);
		//TODO: generate left wheel signal


		//STM_EVAL_LEDToggle(LED4);
		EXTI_ClearITPendingBit(EXTI_Line0);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fa17 	bl	80005c0 <EXTI_ClearITPendingBit>
	}
}
 8001192:	bf00      	nop
 8001194:	3748      	adds	r7, #72	; 0x48
 8001196:	46bd      	mov	sp, r7
 8001198:	bdb0      	pop	{r4, r5, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000044 	.word	0x20000044
 80011a0:	20000054 	.word	0x20000054
 80011a4:	20000058 	.word	0x20000058
 80011a8:	447a0000 	.word	0x447a0000
 80011ac:	45610000 	.word	0x45610000
 80011b0:	42000000 	.word	0x42000000
 80011b4:	49742400 	.word	0x49742400
 80011b8:	20000078 	.word	0x20000078
 80011bc:	20000074 	.word	0x20000074

080011c0 <init_PB_user>:

void init_PB_user(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80011c6:	2101      	movs	r1, #1
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fb17 	bl	80007fc <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);	//TODO: Check if yes or no
 80011ce:	2101      	movs	r1, #1
 80011d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011d4:	f7ff fb52 	bl	800087c <RCC_APB2PeriphClockCmd>

	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 80011d8:	2300      	movs	r3, #0
 80011da:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Pin = GPIO_Pin_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_config);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	481a      	ldr	r0, [pc, #104]	; (8001254 <init_PB_user+0x94>)
 80011ec:	f7ff f9f8 	bl	80005e0 <GPIO_Init>

	//For PC15 AUX INPUT
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80011f0:	2101      	movs	r1, #1
 80011f2:	2004      	movs	r0, #4
 80011f4:	f7ff fb02 	bl	80007fc <RCC_AHB1PeriphClockCmd>
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 80011f8:	2300      	movs	r3, #0
 80011fa:	753b      	strb	r3, [r7, #20]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_UP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Pin = GPIO_Pin_15;
 8001200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001204:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &GPIO_config);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <init_PB_user+0x98>)
 800120e:	f7ff f9e7 	bl	80005e0 <GPIO_Init>
	////

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fb51 	bl	80008bc <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line0;
 800121a:	2301      	movs	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 800121e:	2300      	movs	r3, #0
 8001220:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 8001222:	2308      	movs	r3, #8
 8001224:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 8001226:	2301      	movs	r3, #1
 8001228:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f93a 	bl	80004a8 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI0_IRQn;
 8001234:	2306      	movs	r3, #6
 8001236:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x07;
 8001238:	2307      	movs	r3, #7
 800123a:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 800123c:	2301      	movs	r3, #1
 800123e:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 8001240:	2301      	movs	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ffd0 	bl	80001ec <NVIC_Init>
}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020000 	.word	0x40020000
 8001258:	40020800 	.word	0x40020800

0800125c <init_wheels_inputs>:

// Inits the input for each wheel
void init_wheels_inputs(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_config;
	EXTI_InitTypeDef EXTI_config;
	NVIC_InitTypeDef NVIC_config;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001262:	2101      	movs	r1, #1
 8001264:	2004      	movs	r0, #4
 8001266:	f7ff fac9 	bl	80007fc <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800126a:	2101      	movs	r1, #1
 800126c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001270:	f7ff fb04 	bl	800087c <RCC_APB2PeriphClockCmd>

	GPIO_config.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8001274:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001278:	613b      	str	r3, [r7, #16]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_UP;	// TODO: Check if pullups yes or no
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
	GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 800127e:	2300      	movs	r3, #0
 8001280:	753b      	strb	r3, [r7, #20]
	//GPIO_config.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_config);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	4818      	ldr	r0, [pc, #96]	; (80012ec <init_wheels_inputs+0x90>)
 800128a:	f7ff f9a9 	bl	80005e0 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 800128e:	210d      	movs	r1, #13
 8001290:	2002      	movs	r0, #2
 8001292:	f7ff fb13 	bl	80008bc <SYSCFG_EXTILineConfig>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource14);
 8001296:	210e      	movs	r1, #14
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff fb0f 	bl	80008bc <SYSCFG_EXTILineConfig>

	EXTI_config.EXTI_Line = EXTI_Line13;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	60bb      	str	r3, [r7, #8]
	EXTI_config.EXTI_Mode = EXTI_Mode_Interrupt;
 80012a4:	2300      	movs	r3, #0
 80012a6:	733b      	strb	r3, [r7, #12]
	EXTI_config.EXTI_Trigger = EXTI_Trigger_Rising;
 80012a8:	2308      	movs	r3, #8
 80012aa:	737b      	strb	r3, [r7, #13]
	EXTI_config.EXTI_LineCmd = ENABLE;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_config);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8f7 	bl	80004a8 <EXTI_Init>
	EXTI_config.EXTI_Line = EXTI_Line14;
 80012ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012be:	60bb      	str	r3, [r7, #8]
	EXTI_Init(&EXTI_config);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8ef 	bl	80004a8 <EXTI_Init>

	NVIC_config.NVIC_IRQChannel = EXTI15_10_IRQn;
 80012ca:	2328      	movs	r3, #40	; 0x28
 80012cc:	713b      	strb	r3, [r7, #4]
	NVIC_config.NVIC_IRQChannelPreemptionPriority = 0x02;
 80012ce:	2302      	movs	r3, #2
 80012d0:	717b      	strb	r3, [r7, #5]
	NVIC_config.NVIC_IRQChannelSubPriority = 0x01;
 80012d2:	2301      	movs	r3, #1
 80012d4:	71bb      	strb	r3, [r7, #6]
	NVIC_config.NVIC_IRQChannelCmd = ENABLE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_config);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ff85 	bl	80001ec <NVIC_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020800 	.word	0x40020800

080012f0 <init_TIM3_TIM4>:

// Inits TIM3 and TIM4 for 1us free-running counters that interrupts when overflowing
void init_TIM3_TIM4(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80012f6:	2101      	movs	r1, #1
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff fa9f 	bl	800083c <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80012fe:	2101      	movs	r1, #1
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fa9b 	bl	800083c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructInit(&TIM_TimerConfig);	//TODO: Check if yes or no
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fb85 	bl	8000a18 <TIM_TimeBaseStructInit>
	TIM_TimerConfig.TIM_Prescaler = 94;	// Now we get 1 Tic every 1us
 800130e:	235e      	movs	r3, #94	; 0x5e
 8001310:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 8001312:	2300      	movs	r3, #0
 8001314:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 0xFFFFFFFF;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM3, &TIM_TimerConfig);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4619      	mov	r1, r3
 8001324:	4817      	ldr	r0, [pc, #92]	; (8001384 <init_TIM3_TIM4+0x94>)
 8001326:	f7ff fb0b 	bl	8000940 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(TIM4, &TIM_TimerConfig);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <init_TIM3_TIM4+0x98>)
 8001330:	f7ff fb06 	bl	8000940 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8001334:	2201      	movs	r2, #1
 8001336:	2101      	movs	r1, #1
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <init_TIM3_TIM4+0x94>)
 800133a:	f7ff fbc1 	bl	8000ac0 <TIM_ITConfig>
    TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 800133e:	2201      	movs	r2, #1
 8001340:	2101      	movs	r1, #1
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <init_TIM3_TIM4+0x98>)
 8001344:	f7ff fbbc 	bl	8000ac0 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM3_IRQn;
 8001348:	231d      	movs	r3, #29
 800134a:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 800134c:	2301      	movs	r3, #1
 800134e:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x04;
 8001350:	2304      	movs	r3, #4
 8001352:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 8001354:	2301      	movs	r3, #1
 8001356:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 8001358:	463b      	mov	r3, r7
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ff46 	bl	80001ec <NVIC_Init>
    NVIC_TimerConfig.NVIC_IRQChannel = TIM4_IRQn;
 8001360:	231e      	movs	r3, #30
 8001362:	703b      	strb	r3, [r7, #0]
    NVIC_Init(&NVIC_TimerConfig);
 8001364:	463b      	mov	r3, r7
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff40 	bl	80001ec <NVIC_Init>

    TIM_Cmd(TIM3, ENABLE);
 800136c:	2101      	movs	r1, #1
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <init_TIM3_TIM4+0x94>)
 8001370:	f7ff fb86 	bl	8000a80 <TIM_Cmd>
    TIM_Cmd(TIM4, ENABLE);
 8001374:	2101      	movs	r1, #1
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <init_TIM3_TIM4+0x98>)
 8001378:	f7ff fb82 	bl	8000a80 <TIM_Cmd>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40000400 	.word	0x40000400
 8001388:	40000800 	.word	0x40000800

0800138c <init_TIM2>:

// Inits TIM2 for 1ms interrupts
void init_TIM2(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimerConfig;
	NVIC_InitTypeDef NVIC_TimerConfig;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fa51 	bl	800083c <RCC_APB1PeriphClockCmd>

	TIM_TimerConfig.TIM_Prescaler = 17;
 800139a:	2311      	movs	r3, #17
 800139c:	80bb      	strh	r3, [r7, #4]
	TIM_TimerConfig.TIM_CounterMode = TIM_CounterMode_Up;
 800139e:	2300      	movs	r3, #0
 80013a0:	80fb      	strh	r3, [r7, #6]
	TIM_TimerConfig.TIM_Period = 4999;
 80013a2:	f241 3387 	movw	r3, #4999	; 0x1387
 80013a6:	60bb      	str	r3, [r7, #8]
	TIM_TimerConfig.TIM_ClockDivision = TIM_CKD_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &TIM_TimerConfig);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013b4:	f7ff fac4 	bl	8000940 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2101      	movs	r1, #1
 80013bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c0:	f7ff fb7e 	bl	8000ac0 <TIM_ITConfig>

    NVIC_TimerConfig.NVIC_IRQChannel = TIM2_IRQn;
 80013c4:	231c      	movs	r3, #28
 80013c6:	703b      	strb	r3, [r7, #0]
    NVIC_TimerConfig.NVIC_IRQChannelCmd = ENABLE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	70fb      	strb	r3, [r7, #3]
    // TODO: Check priorities
    NVIC_TimerConfig.NVIC_IRQChannelPreemptionPriority = 0x03;
 80013cc:	2303      	movs	r3, #3
 80013ce:	707b      	strb	r3, [r7, #1]
    NVIC_TimerConfig.NVIC_IRQChannelSubPriority = 0x01;
 80013d0:	2301      	movs	r3, #1
 80013d2:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_TimerConfig);
 80013d4:	463b      	mov	r3, r7
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe ff08 	bl	80001ec <NVIC_Init>

    TIM_Cmd(TIM2, ENABLE);
 80013dc:	2101      	movs	r1, #1
 80013de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013e2:	f7ff fb4d 	bl	8000a80 <TIM_Cmd>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <init_DAC>:

void init_DAC(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_config;
	GPIO_InitTypeDef GPIO_config;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80013f6:	2101      	movs	r1, #1
 80013f8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80013fc:	f7ff fa1e 	bl	800083c <RCC_APB1PeriphClockCmd>
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_config.GPIO_Pin = GPIO_Pin_4;
 8001400:	2310      	movs	r3, #16
 8001402:	603b      	str	r3, [r7, #0]
	GPIO_config.GPIO_Mode = GPIO_Mode_AN;
 8001404:	2303      	movs	r3, #3
 8001406:	713b      	strb	r3, [r7, #4]
	GPIO_config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_config);
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <init_DAC+0x58>)
 8001412:	f7ff f8e5 	bl	80005e0 <GPIO_Init>

	//DAC_DeInit();
	DAC_config.DAC_Trigger = DAC_Trigger_None;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
	DAC_config.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
	DAC_config.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
	DAC_Init(DAC_Channel_1, &DAC_config);
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4619      	mov	r1, r3
 8001428:	2000      	movs	r0, #0
 800142a:	f7fe ff41 	bl	80002b0 <DAC_Init>

	DAC_Cmd(DAC_Channel_1, ENABLE);
 800142e:	2101      	movs	r1, #1
 8001430:	2000      	movs	r0, #0
 8001432:	f7fe ff71 	bl	8000318 <DAC_Cmd>
	DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 8001436:	2100      	movs	r1, #0
 8001438:	2000      	movs	r0, #0
 800143a:	f7fe ff93 	bl	8000364 <DAC_SetChannel1Data>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000

0800144c <TIM2_IRQHandler>:

// Executes the TIM2 RSI
void TIM2_IRQHandler(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != 0) {
 8001450:	2101      	movs	r1, #1
 8001452:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001456:	f7ff fb57 	bl	8000b08 <TIM_GetITStatus>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d014      	beq.n	800148a <TIM2_IRQHandler+0x3e>

		counter_led++;
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <TIM2_IRQHandler+0x44>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <TIM2_IRQHandler+0x44>)
 8001468:	6013      	str	r3, [r2, #0]
		if(counter_led >= 2000){
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <TIM2_IRQHandler+0x44>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001472:	db05      	blt.n	8001480 <TIM2_IRQHandler+0x34>
			counter_led = 0;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <TIM2_IRQHandler+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
			STM_EVAL_LEDToggle(LED3);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fbc6 	bl	8000c0c <STM_EVAL_LEDToggle>
		}

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001480:	2101      	movs	r1, #1
 8001482:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001486:	f7ff fb69 	bl	8000b5c <TIM_ClearITPendingBit>
	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000030 	.word	0x20000030

08001494 <TIM3_IRQHandler>:

// Executes the TIM3 RSI
void TIM3_IRQHandler(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != 0) {
 8001498:	2101      	movs	r1, #1
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <TIM3_IRQHandler+0x30>)
 800149c:	f7ff fb34 	bl	8000b08 <TIM_GetITStatus>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <TIM3_IRQHandler+0x2c>
		num_overflows_right++;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <TIM3_IRQHandler+0x34>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <TIM3_IRQHandler+0x34>)
 80014ae:	6013      	str	r3, [r2, #0]
		TIM_SetCounter(TIM3, 0);
 80014b0:	2100      	movs	r1, #0
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <TIM3_IRQHandler+0x30>)
 80014b4:	f7ff faca 	bl	8000a4c <TIM_SetCounter>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80014b8:	2101      	movs	r1, #1
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM3_IRQHandler+0x30>)
 80014bc:	f7ff fb4e 	bl	8000b5c <TIM_ClearITPendingBit>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40000400 	.word	0x40000400
 80014c8:	20000034 	.word	0x20000034

080014cc <TIM4_IRQHandler>:

// Executes the TIM4 RSI
void TIM4_IRQHandler(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != 0) {
 80014d0:	2101      	movs	r1, #1
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <TIM4_IRQHandler+0x30>)
 80014d4:	f7ff fb18 	bl	8000b08 <TIM_GetITStatus>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <TIM4_IRQHandler+0x2c>
		num_overflows_left++;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <TIM4_IRQHandler+0x34>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <TIM4_IRQHandler+0x34>)
 80014e6:	6013      	str	r3, [r2, #0]
		TIM_SetCounter(TIM4, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <TIM4_IRQHandler+0x30>)
 80014ec:	f7ff faae 	bl	8000a4c <TIM_SetCounter>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM4_IRQHandler+0x30>)
 80014f4:	f7ff fb32 	bl	8000b5c <TIM_ClearITPendingBit>
	}
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40000800 	.word	0x40000800
 8001500:	20000038 	.word	0x20000038

08001504 <_calculate_rotation_speed>:

unsigned int _calculate_rotation_speed(unsigned int timer_count, unsigned long overflow_count){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	return 100000000/(32 * (timer_count +  65535 * overflow_count));
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	1a9a      	subs	r2, r3, r2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	015b      	lsls	r3, r3, #5
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <_calculate_rotation_speed+0x2c>)
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	05f5e100 	.word	0x05f5e100

08001534 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line13) != 0) {
 8001538:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800153c:	f7ff f826 	bl	800058c <EXTI_GetITStatus>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01a      	beq.n	800157c <EXTI15_10_IRQHandler+0x48>

    	right_speed = _calculate_rotation_speed(TIM_GetCounter(TIM3), num_overflows_right);
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <EXTI15_10_IRQHandler+0x90>)
 8001548:	f7ff fa8e 	bl	8000a68 <TIM_GetCounter>
 800154c:	4602      	mov	r2, r0
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <EXTI15_10_IRQHandler+0x94>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f7ff ffd5 	bl	8001504 <_calculate_rotation_speed>
 800155a:	4602      	mov	r2, r0
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <EXTI15_10_IRQHandler+0x98>)
 800155e:	601a      	str	r2, [r3, #0]

    	TIM_SetCounter(TIM3, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <EXTI15_10_IRQHandler+0x90>)
 8001564:	f7ff fa72 	bl	8000a4c <TIM_SetCounter>
    	num_overflows_right = 0;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <EXTI15_10_IRQHandler+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

    	STM_EVAL_LEDToggle(LED3); //TODO: Debug
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fb4c 	bl	8000c0c <STM_EVAL_LEDToggle>
        EXTI_ClearITPendingBit(EXTI_Line13);
 8001574:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001578:	f7ff f822 	bl	80005c0 <EXTI_ClearITPendingBit>
    }
    if (EXTI_GetITStatus(EXTI_Line14) != 0) {
 800157c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001580:	f7ff f804 	bl	800058c <EXTI_GetITStatus>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01a      	beq.n	80015c0 <EXTI15_10_IRQHandler+0x8c>

    	left_speed = _calculate_rotation_speed(TIM_GetCounter(TIM4), num_overflows_left);
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <EXTI15_10_IRQHandler+0x9c>)
 800158c:	f7ff fa6c 	bl	8000a68 <TIM_GetCounter>
 8001590:	4602      	mov	r2, r0
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <EXTI15_10_IRQHandler+0xa0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff ffb3 	bl	8001504 <_calculate_rotation_speed>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <EXTI15_10_IRQHandler+0xa4>)
 80015a2:	601a      	str	r2, [r3, #0]

    	TIM_SetCounter(TIM4, 0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <EXTI15_10_IRQHandler+0x9c>)
 80015a8:	f7ff fa50 	bl	8000a4c <TIM_SetCounter>
    	num_overflows_left = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <EXTI15_10_IRQHandler+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

    	STM_EVAL_LEDToggle(LED4); //TODO: Debug
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fb2a 	bl	8000c0c <STM_EVAL_LEDToggle>
        EXTI_ClearITPendingBit(EXTI_Line14);
 80015b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015bc:	f7ff f800 	bl	80005c0 <EXTI_ClearITPendingBit>
    }
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000400 	.word	0x40000400
 80015c8:	20000034 	.word	0x20000034
 80015cc:	2000003c 	.word	0x2000003c
 80015d0:	40000800 	.word	0x40000800
 80015d4:	20000038 	.word	0x20000038
 80015d8:	20000040 	.word	0x20000040

080015dc <main>:

int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	init_TIM2();
 80015e0:	f7ff fed4 	bl	800138c <init_TIM2>
	init_TIM3_TIM4();
 80015e4:	f7ff fe84 	bl	80012f0 <init_TIM3_TIM4>
	init_TIM5();
 80015e8:	f7ff fbf0 	bl	8000dcc <init_TIM5>
	init_wheels_inputs();
 80015ec:	f7ff fe36 	bl	800125c <init_wheels_inputs>
	init_wheel_signal_ouput();
 80015f0:	f7ff fbd2 	bl	8000d98 <init_wheel_signal_ouput>
	init_PB_user();
 80015f4:	f7ff fde4 	bl	80011c0 <init_PB_user>
	init_DAC();
 80015f8:	f7ff fefa 	bl	80013f0 <init_DAC>
	STM_EVAL_LEDInit(LED3);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fabf 	bl	8000b80 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fabc 	bl	8000b80 <STM_EVAL_LEDInit>


	/* Infinite loop */
	while (1){
 8001608:	e7fe      	b.n	8001608 <main+0x2c>

0800160a <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1){
 800160e:	e7fe      	b.n	800160e <sEE_TIMEOUT_UserCallback+0x4>

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001616:	e003      	b.n	8001620 <LoopCopyDataInit>

08001618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800161a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800161c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161e:	3104      	adds	r1, #4

08001620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001628:	d3f6      	bcc.n	8001618 <CopyDataInit>
  ldr  r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800162c:	e002      	b.n	8001634 <LoopFillZerobss>

0800162e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001630:	f842 3b04 	str.w	r3, [r2], #4

08001634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001638:	d3f9      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163a:	f000 f841 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f000 f8f1 	bl	8001824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff ffcb 	bl	80015dc <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001648:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800164c:	080018c4 	.word	0x080018c4
  ldr  r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001654:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001658:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800165c:	2000007c 	.word	0x2000007c

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>

08001662 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001674:	e7fe      	b.n	8001674 <HardFault_Handler+0x4>

08001676 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800167a:	e7fe      	b.n	800167a <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001680:	e7fe      	b.n	8001680 <BusFault_Handler+0x4>

08001682 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001686:	e7fe      	b.n	8001686 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <SystemInit+0x60>)
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <SystemInit+0x60>)
 80016c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <SystemInit+0x64>)
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <SystemInit+0x64>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <SystemInit+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <SystemInit+0x64>)
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <SystemInit+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <SystemInit+0x64>)
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <SystemInit+0x68>)
 80016fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <SystemInit+0x64>)
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <SystemInit+0x64>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800170e:	f000 f80d 	bl	800172c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001712:	4b03      	ldr	r3, [pc, #12]	; (8001720 <SystemInit+0x60>)
 8001714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001718:	609a      	str	r2, [r3, #8]
#endif
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	40023800 	.word	0x40023800
 8001728:	24003010 	.word	0x24003010

0800172c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800173a:	4a36      	ldr	r2, [pc, #216]	; (8001814 <SetSysClock+0xe8>)
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <SetSysClock+0xe8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <SetSysClock+0xe8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3301      	adds	r3, #1
 8001754:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <SetSysClock+0x38>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001762:	d1f0      	bne.n	8001746 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <SetSysClock+0xe8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001770:	2301      	movs	r3, #1
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	e001      	b.n	800177a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <SetSysClock+0xe8>)
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <SetSysClock+0xec>)
 8001784:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <SetSysClock+0xe8>)
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <SetSysClock+0xe8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <SetSysClock+0xf0>)
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <SetSysClock+0xf0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179c:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <SetSysClock+0xe8>)
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <SetSysClock+0xe8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <SetSysClock+0xe8>)
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <SetSysClock+0xe8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b0:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <SetSysClock+0xe8>)
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <SetSysClock+0xe8>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80017bc:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <SetSysClock+0xe8>)
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <SetSysClock+0xe8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80017ca:	bf00      	nop
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <SetSysClock+0xe8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <SetSysClock+0xf4>)
 80017da:	f240 7205 	movw	r2, #1797	; 0x705
 80017de:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <SetSysClock+0xe8>)
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <SetSysClock+0xe8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80017ec:	4a09      	ldr	r2, [pc, #36]	; (8001814 <SetSysClock+0xe8>)
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <SetSysClock+0xe8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80017f8:	bf00      	nop
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SetSysClock+0xe8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d1f9      	bne.n	80017fa <SetSysClock+0xce>
    {
    }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	07405a08 	.word	0x07405a08
 800181c:	40007000 	.word	0x40007000
 8001820:	40023c00 	.word	0x40023c00

08001824 <__libc_init_array>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	4e0d      	ldr	r6, [pc, #52]	; (800185c <__libc_init_array+0x38>)
 8001828:	4c0d      	ldr	r4, [pc, #52]	; (8001860 <__libc_init_array+0x3c>)
 800182a:	1ba4      	subs	r4, r4, r6
 800182c:	10a4      	asrs	r4, r4, #2
 800182e:	2500      	movs	r5, #0
 8001830:	42a5      	cmp	r5, r4
 8001832:	d109      	bne.n	8001848 <__libc_init_array+0x24>
 8001834:	4e0b      	ldr	r6, [pc, #44]	; (8001864 <__libc_init_array+0x40>)
 8001836:	4c0c      	ldr	r4, [pc, #48]	; (8001868 <__libc_init_array+0x44>)
 8001838:	f000 f818 	bl	800186c <_init>
 800183c:	1ba4      	subs	r4, r4, r6
 800183e:	10a4      	asrs	r4, r4, #2
 8001840:	2500      	movs	r5, #0
 8001842:	42a5      	cmp	r5, r4
 8001844:	d105      	bne.n	8001852 <__libc_init_array+0x2e>
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800184c:	4798      	blx	r3
 800184e:	3501      	adds	r5, #1
 8001850:	e7ee      	b.n	8001830 <__libc_init_array+0xc>
 8001852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001856:	4798      	blx	r3
 8001858:	3501      	adds	r5, #1
 800185a:	e7f2      	b.n	8001842 <__libc_init_array+0x1e>
 800185c:	080018bc 	.word	0x080018bc
 8001860:	080018bc 	.word	0x080018bc
 8001864:	080018bc 	.word	0x080018bc
 8001868:	080018c0 	.word	0x080018c0

0800186c <_init>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr

08001878 <_fini>:
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187a:	bf00      	nop
 800187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187e:	bc08      	pop	{r3}
 8001880:	469e      	mov	lr, r3
 8001882:	4770      	bx	lr
